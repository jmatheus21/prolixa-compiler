/* This file was generated by SableCC (http://www.sablecc.org/). */

package prolixa.parser;

import prolixa.lexer.*;
import prolixa.node.*;
import prolixa.analysis.*;
import java.util.*;

import java.io.DataInputStream;
import java.io.BufferedInputStream;
import java.io.IOException;

@SuppressWarnings("nls")
public class Parser
{
    public final Analysis ignoredTokens = new AnalysisAdapter();

    protected ArrayList<Object> nodeList;

    private final Lexer lexer;
    private final ListIterator<Object> stack = new LinkedList<Object>().listIterator();
    private int last_pos;
    private int last_line;
    private Token last_token;
    private final TokenIndex converter = new TokenIndex();
    private final int[] action = new int[2];

    private final static int SHIFT = 0;
    private final static int REDUCE = 1;
    private final static int ACCEPT = 2;
    private final static int ERROR = 3;

    public Parser(@SuppressWarnings("hiding") Lexer lexer)
    {
        this.lexer = lexer;
    }

    @SuppressWarnings({"unchecked","unused"})
    private void push(int numstate, ArrayList<Object> listNode) throws ParserException, LexerException, IOException
    {
        this.nodeList = listNode;

        if(!this.stack.hasNext())
        {
            this.stack.add(new State(numstate, this.nodeList));
            return;
        }

        State s = (State) this.stack.next();
        s.state = numstate;
        s.nodes = this.nodeList;
    }

    private int goTo(int index)
    {
        int state = state();
        int low = 1;
        int high = gotoTable[index].length - 1;
        int value = gotoTable[index][0][1];

        while(low <= high)
        {
            // int middle = (low + high) / 2;
            int middle = (low + high) >>> 1;

            if(state < gotoTable[index][middle][0])
            {
                high = middle - 1;
            }
            else if(state > gotoTable[index][middle][0])
            {
                low = middle + 1;
            }
            else
            {
                value = gotoTable[index][middle][1];
                break;
            }
        }

        return value;
    }

    private int state()
    {
        State s = (State) this.stack.previous();
        this.stack.next();
        return s.state;
    }

    private ArrayList<Object> pop()
    {
        return ((State) this.stack.previous()).nodes;
    }

    private int index(Switchable token)
    {
        this.converter.index = -1;
        token.apply(this.converter);
        return this.converter.index;
    }

    @SuppressWarnings("unchecked")
    public Start parse() throws ParserException, LexerException, IOException
    {
        push(0, null);
        List<Node> ign = null;
        while(true)
        {
            while(index(this.lexer.peek()) == -1)
            {
                if(ign == null)
                {
                    ign = new LinkedList<Node>();
                }

                ign.add(this.lexer.next());
            }

            if(ign != null)
            {
                this.ignoredTokens.setIn(this.lexer.peek(), ign);
                ign = null;
            }

            this.last_pos = this.lexer.peek().getPos();
            this.last_line = this.lexer.peek().getLine();
            this.last_token = this.lexer.peek();

            int index = index(this.lexer.peek());
            this.action[0] = Parser.actionTable[state()][0][1];
            this.action[1] = Parser.actionTable[state()][0][2];

            int low = 1;
            int high = Parser.actionTable[state()].length - 1;

            while(low <= high)
            {
                int middle = (low + high) / 2;

                if(index < Parser.actionTable[state()][middle][0])
                {
                    high = middle - 1;
                }
                else if(index > Parser.actionTable[state()][middle][0])
                {
                    low = middle + 1;
                }
                else
                {
                    this.action[0] = Parser.actionTable[state()][middle][1];
                    this.action[1] = Parser.actionTable[state()][middle][2];
                    break;
                }
            }

            switch(this.action[0])
            {
                case SHIFT:
		    {
		        ArrayList<Object> list = new ArrayList<Object>();
		        list.add(this.lexer.next());
                        push(this.action[1], list);
                    }
		    break;
                case REDUCE:
                    {
                        int reduction = this.action[1];
                        if(reduction < 500) reduce_0(reduction);
                    }
                    break;
                case ACCEPT:
                    {
                        EOF node2 = (EOF) this.lexer.next();
                        PAPrograma node1 = (PAPrograma) pop().get(0);
                        Start node = new Start(node1, node2);
                        return node;
                    }
                case ERROR:
                    throw new ParserException(this.last_token,
                        "[" + this.last_line + "," + this.last_pos + "] " +
                        Parser.errorMessages[Parser.errors[this.action[1]]]);
            }
        }
    }

    private void reduce_0(int reduction) throws IOException, LexerException, ParserException
    {
        switch(reduction)
        {
            case 0: /* reduce AAprograma1Programa */
            {
                ArrayList<Object> list = new0();
                push(goTo(0), list);
            }
            break;
            case 1: /* reduce AAprograma2Programa */
            {
                ArrayList<Object> list = new1();
                push(goTo(0), list);
            }
            break;
            case 2: /* reduce AAprograma3Programa */
            {
                ArrayList<Object> list = new2();
                push(goTo(0), list);
            }
            break;
            case 3: /* reduce AAprograma4Programa */
            {
                ArrayList<Object> list = new3();
                push(goTo(0), list);
            }
            break;
            case 4: /* reduce ADeclaracoes */
            {
                ArrayList<Object> list = new4();
                push(goTo(1), list);
            }
            break;
            case 5: /* reduce AVariavelDeclaracao */
            {
                ArrayList<Object> list = new5();
                push(goTo(2), list);
            }
            break;
            case 6: /* reduce AAconstantedeclaracao1Declaracao */
            {
                ArrayList<Object> list = new6();
                push(goTo(2), list);
            }
            break;
            case 7: /* reduce AAconstantedeclaracao2Declaracao */
            {
                ArrayList<Object> list = new7();
                push(goTo(2), list);
            }
            break;
            case 8: /* reduce AAvetordeclaracao1Declaracao */
            {
                ArrayList<Object> list = new8();
                push(goTo(2), list);
            }
            break;
            case 9: /* reduce AAvetordeclaracao2Declaracao */
            {
                ArrayList<Object> list = new9();
                push(goTo(2), list);
            }
            break;
            case 10: /* reduce AComandosComandos */
            {
                ArrayList<Object> list = new10();
                push(goTo(3), list);
            }
            break;
            case 11: /* reduce ATermosMatriz */
            {
                ArrayList<Object> list = new11();
                push(goTo(4), list);
            }
            break;
            case 12: /* reduce ANumberTipo */
            {
                ArrayList<Object> list = new12();
                push(goTo(5), list);
            }
            break;
            case 13: /* reduce ASymbolTipo */
            {
                ArrayList<Object> list = new13();
                push(goTo(5), list);
            }
            break;
            case 14: /* reduce AAnswerTipo */
            {
                ArrayList<Object> list = new14();
                push(goTo(5), list);
            }
            break;
            case 15: /* reduce AIdentificadorVar */
            {
                ArrayList<Object> list = new15();
                push(goTo(6), list);
            }
            break;
            case 16: /* reduce AAacessovectorvar1Var */
            {
                ArrayList<Object> list = new16();
                push(goTo(6), list);
            }
            break;
            case 17: /* reduce AAacessovectorvar2Var */
            {
                ArrayList<Object> list = new17();
                push(goTo(6), list);
            }
            break;
            case 18: /* reduce AUnalt */
            {
                ArrayList<Object> list = new18();
                push(goTo(7), list);
            }
            break;
            case 19: /* reduce ANumeroValor */
            {
                ArrayList<Object> list = new19();
                push(goTo(8), list);
            }
            break;
            case 20: /* reduce ACharValor */
            {
                ArrayList<Object> list = new20();
                push(goTo(8), list);
            }
            break;
            case 21: /* reduce AStringValor */
            {
                ArrayList<Object> list = new21();
                push(goTo(8), list);
            }
            break;
            case 22: /* reduce ABooleanValor */
            {
                ArrayList<Object> list = new22();
                push(goTo(8), list);
            }
            break;
            case 23: /* reduce AComandoSimplesComando */
            {
                ArrayList<Object> list = new23();
                push(goTo(9), list);
            }
            break;
            case 24: /* reduce AAjustincasethatcomando1Comando */
            {
                ArrayList<Object> list = new24();
                push(goTo(9), list);
            }
            break;
            case 25: /* reduce AAjustincasethatcomando2Comando */
            {
                ArrayList<Object> list = new25();
                push(goTo(9), list);
            }
            break;
            case 26: /* reduce AAsLongAsComando */
            {
                ArrayList<Object> list = new26();
                push(goTo(9), list);
            }
            break;
            case 27: /* reduce AConsideringComando */
            {
                ArrayList<Object> list = new27();
                push(goTo(9), list);
            }
            break;
            case 28: /* reduce ACondicional */
            {
                ArrayList<Object> list = new28();
                push(goTo(10), list);
            }
            break;
            case 29: /* reduce AComandoSimplesCorpoComando */
            {
                ArrayList<Object> list = new29();
                push(goTo(11), list);
            }
            break;
            case 30: /* reduce ABlocoCorpoComando */
            {
                ArrayList<Object> list = new30();
                push(goTo(11), list);
            }
            break;
            case 31: /* reduce AAtribVarComandoSimples */
            {
                ArrayList<Object> list = new31();
                push(goTo(12), list);
            }
            break;
            case 32: /* reduce AAtribConstComandoSimples */
            {
                ArrayList<Object> list = new32();
                push(goTo(12), list);
            }
            break;
            case 33: /* reduce AAcapturecomandosimples1ComandoSimples */
            {
                ArrayList<Object> list = new33();
                push(goTo(12), list);
            }
            break;
            case 34: /* reduce AAcapturecomandosimples2ComandoSimples */
            {
                ArrayList<Object> list = new34();
                push(goTo(12), list);
            }
            break;
            case 35: /* reduce AAshowcomandosimples1ComandoSimples */
            {
                ArrayList<Object> list = new35();
                push(goTo(12), list);
            }
            break;
            case 36: /* reduce AAshowcomandosimples2ComandoSimples */
            {
                ArrayList<Object> list = new36();
                push(goTo(12), list);
            }
            break;
            case 37: /* reduce AAbandonComandoSimples */
            {
                ArrayList<Object> list = new37();
                push(goTo(12), list);
            }
            break;
            case 38: /* reduce AGoToNextIComandoSimples */
            {
                ArrayList<Object> list = new38();
                push(goTo(12), list);
            }
            break;
            case 39: /* reduce AAbloco1Bloco */
            {
                ArrayList<Object> list = new39();
                push(goTo(13), list);
            }
            break;
            case 40: /* reduce AAbloco2Bloco */
            {
                ArrayList<Object> list = new40();
                push(goTo(13), list);
            }
            break;
            case 41: /* reduce AAbloco3Bloco */
            {
                ArrayList<Object> list = new41();
                push(goTo(13), list);
            }
            break;
            case 42: /* reduce AAbloco4Bloco */
            {
                ArrayList<Object> list = new42();
                push(goTo(13), list);
            }
            break;
            case 43: /* reduce AVirgulaExp */
            {
                ArrayList<Object> list = new43();
                push(goTo(14), list);
            }
            break;
            case 44: /* reduce AAtribuicaoConst */
            {
                ArrayList<Object> list = new44();
                push(goTo(15), list);
            }
            break;
            case 45: /* reduce AVarVirgula */
            {
                ArrayList<Object> list = new45();
                push(goTo(16), list);
            }
            break;
            case 46: /* reduce AExpVirgula */
            {
                ArrayList<Object> list = new46();
                push(goTo(17), list);
            }
            break;
            case 47: /* reduce AExpOrExp */
            {
                ArrayList<Object> list = new47();
                push(goTo(18), list);
            }
            break;
            case 48: /* reduce AExpAndExp */
            {
                ArrayList<Object> list = new48();
                push(goTo(18), list);
            }
            break;
            case 49: /* reduce AExpAndOpExpAnd */
            {
                ArrayList<Object> list = new49();
                push(goTo(19), list);
            }
            break;
            case 50: /* reduce AExpXorExpAnd */
            {
                ArrayList<Object> list = new50();
                push(goTo(19), list);
            }
            break;
            case 51: /* reduce AExpXorOpExpXor */
            {
                ArrayList<Object> list = new51();
                push(goTo(20), list);
            }
            break;
            case 52: /* reduce AExpIgualdadeExpXor */
            {
                ArrayList<Object> list = new52();
                push(goTo(20), list);
            }
            break;
            case 53: /* reduce AExpIgualExpIgualdade */
            {
                ArrayList<Object> list = new53();
                push(goTo(21), list);
            }
            break;
            case 54: /* reduce AExpDifExpIgualdade */
            {
                ArrayList<Object> list = new54();
                push(goTo(21), list);
            }
            break;
            case 55: /* reduce AExpRelacionalExpIgualdade */
            {
                ArrayList<Object> list = new55();
                push(goTo(21), list);
            }
            break;
            case 56: /* reduce AExpMenorExpRelacional */
            {
                ArrayList<Object> list = new56();
                push(goTo(22), list);
            }
            break;
            case 57: /* reduce AExpMaiorExpRelacional */
            {
                ArrayList<Object> list = new57();
                push(goTo(22), list);
            }
            break;
            case 58: /* reduce AExpMenIgualExpRelacional */
            {
                ArrayList<Object> list = new58();
                push(goTo(22), list);
            }
            break;
            case 59: /* reduce AExpMaiIgualExpRelacional */
            {
                ArrayList<Object> list = new59();
                push(goTo(22), list);
            }
            break;
            case 60: /* reduce AExpAditivoExpRelacional */
            {
                ArrayList<Object> list = new60();
                push(goTo(22), list);
            }
            break;
            case 61: /* reduce AExpSomaExpAditivo */
            {
                ArrayList<Object> list = new61();
                push(goTo(23), list);
            }
            break;
            case 62: /* reduce AExpMenosExpAditivo */
            {
                ArrayList<Object> list = new62();
                push(goTo(23), list);
            }
            break;
            case 63: /* reduce AExpMultiplicativoExpAditivo */
            {
                ArrayList<Object> list = new63();
                push(goTo(23), list);
            }
            break;
            case 64: /* reduce AExpMultExpMultiplicativo */
            {
                ArrayList<Object> list = new64();
                push(goTo(24), list);
            }
            break;
            case 65: /* reduce AExpDivExpMultiplicativo */
            {
                ArrayList<Object> list = new65();
                push(goTo(24), list);
            }
            break;
            case 66: /* reduce AExpDivIntExpMultiplicativo */
            {
                ArrayList<Object> list = new66();
                push(goTo(24), list);
            }
            break;
            case 67: /* reduce AExpUnarioExpMultiplicativo */
            {
                ArrayList<Object> list = new67();
                push(goTo(24), list);
            }
            break;
            case 68: /* reduce AExpNegativoExpUnario */
            {
                ArrayList<Object> list = new68();
                push(goTo(25), list);
            }
            break;
            case 69: /* reduce AExpNotExpUnario */
            {
                ArrayList<Object> list = new69();
                push(goTo(25), list);
            }
            break;
            case 70: /* reduce AExpTermExpUnario */
            {
                ArrayList<Object> list = new70();
                push(goTo(25), list);
            }
            break;
            case 71: /* reduce AVarExpTerm */
            {
                ArrayList<Object> list = new71();
                push(goTo(26), list);
            }
            break;
            case 72: /* reduce AParentesesExpTerm */
            {
                ArrayList<Object> list = new72();
                push(goTo(26), list);
            }
            break;
            case 73: /* reduce AValorExpTerm */
            {
                ArrayList<Object> list = new73();
                push(goTo(26), list);
            }
            break;
            case 74: /* reduce ATerminal$Declaracao */
            {
                ArrayList<Object> list = new74();
                push(goTo(27), list);
            }
            break;
            case 75: /* reduce ANonTerminal$Declaracao */
            {
                ArrayList<Object> list = new75();
                push(goTo(27), list);
            }
            break;
            case 76: /* reduce ATerminal$TermosMatriz */
            {
                ArrayList<Object> list = new76();
                push(goTo(28), list);
            }
            break;
            case 77: /* reduce ANonTerminal$TermosMatriz */
            {
                ArrayList<Object> list = new77();
                push(goTo(28), list);
            }
            break;
            case 78: /* reduce ATerminal$Comando */
            {
                ArrayList<Object> list = new78();
                push(goTo(29), list);
            }
            break;
            case 79: /* reduce ANonTerminal$Comando */
            {
                ArrayList<Object> list = new79();
                push(goTo(29), list);
            }
            break;
            case 80: /* reduce ATerminal$VirgulaExp */
            {
                ArrayList<Object> list = new80();
                push(goTo(30), list);
            }
            break;
            case 81: /* reduce ANonTerminal$VirgulaExp */
            {
                ArrayList<Object> list = new81();
                push(goTo(30), list);
            }
            break;
            case 82: /* reduce ATerminal$VarVirgula */
            {
                ArrayList<Object> list = new82();
                push(goTo(31), list);
            }
            break;
            case 83: /* reduce ANonTerminal$VarVirgula */
            {
                ArrayList<Object> list = new83();
                push(goTo(31), list);
            }
            break;
            case 84: /* reduce ATerminal$ExpVirgula */
            {
                ArrayList<Object> list = new84();
                push(goTo(32), list);
            }
            break;
            case 85: /* reduce ANonTerminal$ExpVirgula */
            {
                ArrayList<Object> list = new85();
                push(goTo(32), list);
            }
            break;
        }
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new0() /* reduce AAprograma1Programa */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList5 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PAPrograma paprogramaNode1;
        {
            // Block
        @SuppressWarnings("unused") Object nullNode2 = null;
        @SuppressWarnings("unused") Object nullNode3 = null;

        paprogramaNode1 = new AArProgramaAPrograma(null, null);
        }
	nodeList.add(paprogramaNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new1() /* reduce AAprograma2Programa */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList6 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList5 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PAPrograma paprogramaNode1;
        {
            // Block
        PADeclaracoes padeclaracoesNode2;
        @SuppressWarnings("unused") Object nullNode3 = null;
        padeclaracoesNode2 = (PADeclaracoes)nodeArrayList6.get(0);

        paprogramaNode1 = new AArProgramaAPrograma(padeclaracoesNode2, null);
        }
	nodeList.add(paprogramaNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new2() /* reduce AAprograma3Programa */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList6 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList5 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PAPrograma paprogramaNode1;
        {
            // Block
        @SuppressWarnings("unused") Object nullNode2 = null;
        PAComandos pacomandosNode3;
        pacomandosNode3 = (PAComandos)nodeArrayList6.get(0);

        paprogramaNode1 = new AArProgramaAPrograma(null, pacomandosNode3);
        }
	nodeList.add(paprogramaNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new3() /* reduce AAprograma4Programa */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList7 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList6 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList5 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PAPrograma paprogramaNode1;
        {
            // Block
        PADeclaracoes padeclaracoesNode2;
        PAComandos pacomandosNode3;
        padeclaracoesNode2 = (PADeclaracoes)nodeArrayList6.get(0);
        pacomandosNode3 = (PAComandos)nodeArrayList7.get(0);

        paprogramaNode1 = new AArProgramaAPrograma(padeclaracoesNode2, pacomandosNode3);
        }
	nodeList.add(paprogramaNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new4() /* reduce ADeclaracoes */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PADeclaracoes padeclaracoesNode1;
        {
            // Block
        LinkedList<Object> listNode3 = new LinkedList<Object>();
        {
            // Block
        LinkedList<Object> listNode2 = new LinkedList<Object>();
        listNode2 = (LinkedList)nodeArrayList4.get(0);
	if(listNode2 != null)
	{
	  listNode3.addAll(listNode2);
	}
        }

        padeclaracoesNode1 = new AArDeclaracoesADeclaracoes(listNode3);
        }
	nodeList.add(padeclaracoesNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new5() /* reduce AVariavelDeclaracao */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PADeclaracao padeclaracaoNode1;
        {
            // Block
        PADeclaracao padeclaracaoNode2;
        TId tidNode3;
        padeclaracaoNode2 = (PADeclaracao)nodeArrayList2.get(0);
        tidNode3 = (TId)nodeArrayList3.get(0);

        padeclaracaoNode1 = new AAVariavelADeclaracao(padeclaracaoNode2, tidNode3);
        }
	nodeList.add(padeclaracaoNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new6() /* reduce AAconstantedeclaracao1Declaracao */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PADeclaracao padeclaracaoNode1;
        {
            // Block
        PADeclaracao padeclaracaoNode2;
        @SuppressWarnings("unused") Object nullNode3 = null;
        TId tidNode4;
        padeclaracaoNode2 = (PADeclaracao)nodeArrayList2.get(0);
        tidNode4 = (TId)nodeArrayList3.get(0);

        padeclaracaoNode1 = new AAConstanteADeclaracao(padeclaracaoNode2, null, tidNode4);
        }
	nodeList.add(padeclaracaoNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new7() /* reduce AAconstantedeclaracao2Declaracao */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList5 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PADeclaracao padeclaracaoNode1;
        {
            // Block
        PADeclaracao padeclaracaoNode2;
        PADeclaracao padeclaracaoNode3;
        TId tidNode4;
        padeclaracaoNode2 = (PADeclaracao)nodeArrayList2.get(0);
        padeclaracaoNode3 = (PADeclaracao)nodeArrayList4.get(0);
        tidNode4 = (TId)nodeArrayList3.get(0);

        padeclaracaoNode1 = new AAConstanteADeclaracao(padeclaracaoNode2, padeclaracaoNode3, tidNode4);
        }
	nodeList.add(padeclaracaoNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new8() /* reduce AAvetordeclaracao1Declaracao */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList8 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList7 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList6 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList5 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PADeclaracao padeclaracaoNode1;
        {
            // Block
        PADeclaracao padeclaracaoNode2;
        PAExp paexpNode3;
        LinkedList<Object> listNode4 = new LinkedList<Object>();
        TId tidNode5;
        padeclaracaoNode2 = (PADeclaracao)nodeArrayList3.get(0);
        paexpNode3 = (PAExp)nodeArrayList5.get(0);
        {
            // Block
        }
        tidNode5 = (TId)nodeArrayList7.get(0);

        padeclaracaoNode1 = new AAVetorADeclaracao(padeclaracaoNode2, paexpNode3, listNode4, tidNode5);
        }
	nodeList.add(padeclaracaoNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new9() /* reduce AAvetordeclaracao2Declaracao */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList9 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList8 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList7 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList6 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList5 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PADeclaracao padeclaracaoNode1;
        {
            // Block
        PADeclaracao padeclaracaoNode2;
        PAExp paexpNode3;
        LinkedList<Object> listNode5 = new LinkedList<Object>();
        TId tidNode6;
        padeclaracaoNode2 = (PADeclaracao)nodeArrayList3.get(0);
        paexpNode3 = (PAExp)nodeArrayList5.get(0);
        {
            // Block
        LinkedList<Object> listNode4 = new LinkedList<Object>();
        listNode4 = (LinkedList)nodeArrayList6.get(0);
	if(listNode4 != null)
	{
	  listNode5.addAll(listNode4);
	}
        }
        tidNode6 = (TId)nodeArrayList8.get(0);

        padeclaracaoNode1 = new AAVetorADeclaracao(padeclaracaoNode2, paexpNode3, listNode5, tidNode6);
        }
	nodeList.add(padeclaracaoNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new10() /* reduce AComandosComandos */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList10 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList9 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList8 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList7 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList6 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList5 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PAComandos pacomandosNode1;
        {
            // Block
        LinkedList<Object> listNode3 = new LinkedList<Object>();
        {
            // Block
        LinkedList<Object> listNode2 = new LinkedList<Object>();
        listNode2 = (LinkedList)nodeArrayList5.get(0);
	if(listNode2 != null)
	{
	  listNode3.addAll(listNode2);
	}
        }

        pacomandosNode1 = new AArComandosAComandos(listNode3);
        }
	nodeList.add(pacomandosNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new11() /* reduce ATermosMatriz */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PADeclaracao padeclaracaoNode1;
        {
            // Block
        TMatriz tmatrizNode2;
        PAExp paexpNode3;
        tmatrizNode2 = (TMatriz)nodeArrayList1.get(0);
        paexpNode3 = (PAExp)nodeArrayList2.get(0);

        padeclaracaoNode1 = new AAMatrizADeclaracao(tmatrizNode2, paexpNode3);
        }
	nodeList.add(padeclaracaoNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new12() /* reduce ANumberTipo */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PADeclaracao padeclaracaoNode1;
        {
            // Block
        TNumber tnumberNode2;
        tnumberNode2 = (TNumber)nodeArrayList1.get(0);

        padeclaracaoNode1 = new AANumberADeclaracao(tnumberNode2);
        }
	nodeList.add(padeclaracaoNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new13() /* reduce ASymbolTipo */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PADeclaracao padeclaracaoNode1;
        {
            // Block
        TSymbol tsymbolNode2;
        tsymbolNode2 = (TSymbol)nodeArrayList1.get(0);

        padeclaracaoNode1 = new AASymbolADeclaracao(tsymbolNode2);
        }
	nodeList.add(padeclaracaoNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new14() /* reduce AAnswerTipo */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PADeclaracao padeclaracaoNode1;
        {
            // Block
        TAnswer tanswerNode2;
        tanswerNode2 = (TAnswer)nodeArrayList1.get(0);

        padeclaracaoNode1 = new AAAnswerADeclaracao(tanswerNode2);
        }
	nodeList.add(padeclaracaoNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new15() /* reduce AIdentificadorVar */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PAVar pavarNode1;
        {
            // Block
        TId tidNode2;
        tidNode2 = (TId)nodeArrayList1.get(0);

        pavarNode1 = new AAIdentificadorAVar(tidNode2);
        }
	nodeList.add(pavarNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new16() /* reduce AAacessovectorvar1Var */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PAVar pavarNode1;
        {
            // Block
        TId tidNode2;
        PAExp paexpNode3;
        LinkedList<Object> listNode4 = new LinkedList<Object>();
        tidNode2 = (TId)nodeArrayList1.get(0);
        paexpNode3 = (PAExp)nodeArrayList3.get(0);
        {
            // Block
        }

        pavarNode1 = new AAAcessoVectorAVar(tidNode2, paexpNode3, listNode4);
        }
	nodeList.add(pavarNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new17() /* reduce AAacessovectorvar2Var */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList5 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PAVar pavarNode1;
        {
            // Block
        TId tidNode2;
        PAExp paexpNode3;
        LinkedList<Object> listNode5 = new LinkedList<Object>();
        tidNode2 = (TId)nodeArrayList1.get(0);
        paexpNode3 = (PAExp)nodeArrayList3.get(0);
        {
            // Block
        LinkedList<Object> listNode4 = new LinkedList<Object>();
        listNode4 = (LinkedList)nodeArrayList4.get(0);
	if(listNode4 != null)
	{
	  listNode5.addAll(listNode4);
	}
        }

        pavarNode1 = new AAAcessoVectorAVar(tidNode2, paexpNode3, listNode5);
        }
	nodeList.add(pavarNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new18() /* reduce AUnalt */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PAUnalt paunaltNode1;
        {
            // Block
        TId tidNode2;
        tidNode2 = (TId)nodeArrayList1.get(0);

        paunaltNode1 = new AArUnaltAUnalt(tidNode2);
        }
	nodeList.add(paunaltNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new19() /* reduce ANumeroValor */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PAExp paexpNode1;
        {
            // Block
        TNumberVal tnumbervalNode2;
        tnumbervalNode2 = (TNumberVal)nodeArrayList1.get(0);

        paexpNode1 = new AANumberValAExp(tnumbervalNode2);
        }
	nodeList.add(paexpNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new20() /* reduce ACharValor */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PAExp paexpNode1;
        {
            // Block
        TSymbolVal tsymbolvalNode2;
        tsymbolvalNode2 = (TSymbolVal)nodeArrayList1.get(0);

        paexpNode1 = new AASymbolValAExp(tsymbolvalNode2);
        }
	nodeList.add(paexpNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new21() /* reduce AStringValor */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PAExp paexpNode1;
        {
            // Block
        TString tstringNode2;
        tstringNode2 = (TString)nodeArrayList1.get(0);

        paexpNode1 = new AAStringAExp(tstringNode2);
        }
	nodeList.add(paexpNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new22() /* reduce ABooleanValor */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PAExp paexpNode1;
        {
            // Block
        TAnswerVal tanswervalNode2;
        tanswervalNode2 = (TAnswerVal)nodeArrayList1.get(0);

        paexpNode1 = new AAAnswerValAExp(tanswervalNode2);
        }
	nodeList.add(paexpNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new23() /* reduce AComandoSimplesComando */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PAComando pacomandoNode1;
        pacomandoNode1 = (PAComando)nodeArrayList1.get(0);
	nodeList.add(pacomandoNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new24() /* reduce AAjustincasethatcomando1Comando */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList9 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList8 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList7 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList6 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList5 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PAComando pacomandoNode1;
        {
            // Block
        PAExp paexpNode2;
        PAComando pacomandoNode3;
        @SuppressWarnings("unused") Object nullNode4 = null;
        paexpNode2 = (PAExp)nodeArrayList6.get(0);
        pacomandoNode3 = (PAComando)nodeArrayList9.get(0);

        pacomandoNode1 = new AAJustInCaseThatAComando(paexpNode2, pacomandoNode3, null);
        }
	nodeList.add(pacomandoNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new25() /* reduce AAjustincasethatcomando2Comando */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList10 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList9 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList8 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList7 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList6 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList5 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PAComando pacomandoNode1;
        {
            // Block
        PAExp paexpNode2;
        PAComando pacomandoNode3;
        PAComando pacomandoNode4;
        paexpNode2 = (PAExp)nodeArrayList6.get(0);
        pacomandoNode3 = (PAComando)nodeArrayList9.get(0);
        pacomandoNode4 = (PAComando)nodeArrayList10.get(0);

        pacomandoNode1 = new AAJustInCaseThatAComando(paexpNode2, pacomandoNode3, pacomandoNode4);
        }
	nodeList.add(pacomandoNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new26() /* reduce AAsLongAsComando */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList8 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList7 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList6 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList5 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PAComando pacomandoNode1;
        {
            // Block
        PAExp paexpNode2;
        PAComando pacomandoNode3;
        paexpNode2 = (PAExp)nodeArrayList5.get(0);
        pacomandoNode3 = (PAComando)nodeArrayList8.get(0);

        pacomandoNode1 = new AAAsLongAComando(paexpNode2, pacomandoNode3);
        }
	nodeList.add(pacomandoNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new27() /* reduce AConsideringComando */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList10 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList9 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList8 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList7 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList6 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList5 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PAComando pacomandoNode1;
        {
            // Block
        PAVar pavarNode2;
        PAExp paexpNode3;
        PAExp paexpNode4;
        PAExp paexpNode5;
        PAComando pacomandoNode6;
        pavarNode2 = (PAVar)nodeArrayList2.get(0);
        paexpNode3 = (PAExp)nodeArrayList4.get(0);
        paexpNode4 = (PAExp)nodeArrayList6.get(0);
        paexpNode5 = (PAExp)nodeArrayList8.get(0);
        pacomandoNode6 = (PAComando)nodeArrayList10.get(0);

        pacomandoNode1 = new AAConsideringAComando(pavarNode2, paexpNode3, paexpNode4, paexpNode5, pacomandoNode6);
        }
	nodeList.add(pacomandoNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new28() /* reduce ACondicional */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PAComando pacomandoNode1;
        {
            // Block
        PAComando pacomandoNode2;
        pacomandoNode2 = (PAComando)nodeArrayList3.get(0);

        pacomandoNode1 = new AACondicionalAComando(pacomandoNode2);
        }
	nodeList.add(pacomandoNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new29() /* reduce AComandoSimplesCorpoComando */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PAComando pacomandoNode1;
        pacomandoNode1 = (PAComando)nodeArrayList1.get(0);
	nodeList.add(pacomandoNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new30() /* reduce ABlocoCorpoComando */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PAComando pacomandoNode1;
        pacomandoNode1 = (PAComando)nodeArrayList1.get(0);
	nodeList.add(pacomandoNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new31() /* reduce AAtribVarComandoSimples */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PAComando pacomandoNode1;
        {
            // Block
        PAVar pavarNode2;
        PAExp paexpNode3;
        pavarNode2 = (PAVar)nodeArrayList1.get(0);
        paexpNode3 = (PAExp)nodeArrayList3.get(0);

        pacomandoNode1 = new AAAtrVarAComando(pavarNode2, paexpNode3);
        }
	nodeList.add(pacomandoNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new32() /* reduce AAtribConstComandoSimples */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PAComando pacomandoNode1;
        {
            // Block
        TId tidNode2;
        PAExp paexpNode3;
        tidNode2 = (TId)nodeArrayList1.get(0);
        paexpNode3 = (PAExp)nodeArrayList3.get(0);

        pacomandoNode1 = new AAAtribConstAComando(tidNode2, paexpNode3);
        }
	nodeList.add(pacomandoNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new33() /* reduce AAcapturecomandosimples1ComandoSimples */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList5 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PAComando pacomandoNode1;
        {
            // Block
        LinkedList<Object> listNode2 = new LinkedList<Object>();
        PAVar pavarNode3;
        {
            // Block
        }
        pavarNode3 = (PAVar)nodeArrayList3.get(0);

        pacomandoNode1 = new AACaptureAComando(listNode2, pavarNode3);
        }
	nodeList.add(pacomandoNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new34() /* reduce AAcapturecomandosimples2ComandoSimples */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList6 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList5 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PAComando pacomandoNode1;
        {
            // Block
        LinkedList<Object> listNode3 = new LinkedList<Object>();
        PAVar pavarNode4;
        {
            // Block
        LinkedList<Object> listNode2 = new LinkedList<Object>();
        listNode2 = (LinkedList)nodeArrayList3.get(0);
	if(listNode2 != null)
	{
	  listNode3.addAll(listNode2);
	}
        }
        pavarNode4 = (PAVar)nodeArrayList4.get(0);

        pacomandoNode1 = new AACaptureAComando(listNode3, pavarNode4);
        }
	nodeList.add(pacomandoNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new35() /* reduce AAshowcomandosimples1ComandoSimples */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList5 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PAComando pacomandoNode1;
        {
            // Block
        LinkedList<Object> listNode2 = new LinkedList<Object>();
        PAExp paexpNode3;
        {
            // Block
        }
        paexpNode3 = (PAExp)nodeArrayList3.get(0);

        pacomandoNode1 = new AAShowAComando(listNode2, paexpNode3);
        }
	nodeList.add(pacomandoNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new36() /* reduce AAshowcomandosimples2ComandoSimples */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList6 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList5 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PAComando pacomandoNode1;
        {
            // Block
        LinkedList<Object> listNode3 = new LinkedList<Object>();
        PAExp paexpNode4;
        {
            // Block
        LinkedList<Object> listNode2 = new LinkedList<Object>();
        listNode2 = (LinkedList)nodeArrayList3.get(0);
	if(listNode2 != null)
	{
	  listNode3.addAll(listNode2);
	}
        }
        paexpNode4 = (PAExp)nodeArrayList4.get(0);

        pacomandoNode1 = new AAShowAComando(listNode3, paexpNode4);
        }
	nodeList.add(pacomandoNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new37() /* reduce AAbandonComandoSimples */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PAComando pacomandoNode1;
        {
            // Block
        TAbandon tabandonNode2;
        TPntVirg tpntvirgNode3;
        tabandonNode2 = (TAbandon)nodeArrayList1.get(0);
        tpntvirgNode3 = (TPntVirg)nodeArrayList2.get(0);

        pacomandoNode1 = new AAAbandonAComando(tabandonNode2, tpntvirgNode3);
        }
	nodeList.add(pacomandoNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new38() /* reduce AGoToNextIComandoSimples */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList5 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PAComando pacomandoNode1;
        {
            // Block
        TGo tgoNode2;
        TTo ttoNode3;
        TNext tnextNode4;
        TIteration titerationNode5;
        TPntVirg tpntvirgNode6;
        tgoNode2 = (TGo)nodeArrayList1.get(0);
        ttoNode3 = (TTo)nodeArrayList2.get(0);
        tnextNode4 = (TNext)nodeArrayList3.get(0);
        titerationNode5 = (TIteration)nodeArrayList4.get(0);
        tpntvirgNode6 = (TPntVirg)nodeArrayList5.get(0);

        pacomandoNode1 = new AAGoToNextIAComando(tgoNode2, ttoNode3, tnextNode4, titerationNode5, tpntvirgNode6);
        }
	nodeList.add(pacomandoNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new39() /* reduce AAbloco1Bloco */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PAComando pacomandoNode1;
        {
            // Block
        LinkedList<Object> listNode2 = new LinkedList<Object>();
        LinkedList<Object> listNode3 = new LinkedList<Object>();
        {
            // Block
        }
        {
            // Block
        }

        pacomandoNode1 = new AABlocoAComando(listNode2, listNode3);
        }
	nodeList.add(pacomandoNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new40() /* reduce AAbloco2Bloco */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PAComando pacomandoNode1;
        {
            // Block
        LinkedList<Object> listNode3 = new LinkedList<Object>();
        LinkedList<Object> listNode4 = new LinkedList<Object>();
        {
            // Block
        LinkedList<Object> listNode2 = new LinkedList<Object>();
        listNode2 = (LinkedList)nodeArrayList2.get(0);
	if(listNode2 != null)
	{
	  listNode3.addAll(listNode2);
	}
        }
        {
            // Block
        }

        pacomandoNode1 = new AABlocoAComando(listNode3, listNode4);
        }
	nodeList.add(pacomandoNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new41() /* reduce AAbloco3Bloco */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PAComando pacomandoNode1;
        {
            // Block
        LinkedList<Object> listNode2 = new LinkedList<Object>();
        LinkedList<Object> listNode4 = new LinkedList<Object>();
        {
            // Block
        }
        {
            // Block
        LinkedList<Object> listNode3 = new LinkedList<Object>();
        listNode3 = (LinkedList)nodeArrayList2.get(0);
	if(listNode3 != null)
	{
	  listNode4.addAll(listNode3);
	}
        }

        pacomandoNode1 = new AABlocoAComando(listNode2, listNode4);
        }
	nodeList.add(pacomandoNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new42() /* reduce AAbloco4Bloco */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PAComando pacomandoNode1;
        {
            // Block
        LinkedList<Object> listNode3 = new LinkedList<Object>();
        LinkedList<Object> listNode5 = new LinkedList<Object>();
        {
            // Block
        LinkedList<Object> listNode2 = new LinkedList<Object>();
        listNode2 = (LinkedList)nodeArrayList2.get(0);
	if(listNode2 != null)
	{
	  listNode3.addAll(listNode2);
	}
        }
        {
            // Block
        LinkedList<Object> listNode4 = new LinkedList<Object>();
        listNode4 = (LinkedList)nodeArrayList3.get(0);
	if(listNode4 != null)
	{
	  listNode5.addAll(listNode4);
	}
        }

        pacomandoNode1 = new AABlocoAComando(listNode3, listNode5);
        }
	nodeList.add(pacomandoNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new43() /* reduce AVirgulaExp */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PAVar pavarNode1;
        {
            // Block
        PAExp paexpNode2;
        paexpNode2 = (PAExp)nodeArrayList2.get(0);

        pavarNode1 = new AAVirgulaExpAVar(paexpNode2);
        }
	nodeList.add(pavarNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new44() /* reduce AAtribuicaoConst */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PADeclaracao padeclaracaoNode1;
        {
            // Block
        PAExp paexpNode2;
        paexpNode2 = (PAExp)nodeArrayList2.get(0);

        padeclaracaoNode1 = new AAAtribuicaoConstADeclaracao(paexpNode2);
        }
	nodeList.add(padeclaracaoNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new45() /* reduce AVarVirgula */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PAComando pacomandoNode1;
        {
            // Block
        PAVar pavarNode2;
        pavarNode2 = (PAVar)nodeArrayList1.get(0);

        pacomandoNode1 = new AAVarVirgulaAComando(pavarNode2);
        }
	nodeList.add(pacomandoNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new46() /* reduce AExpVirgula */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PAComando pacomandoNode1;
        {
            // Block
        PAExp paexpNode2;
        paexpNode2 = (PAExp)nodeArrayList1.get(0);

        pacomandoNode1 = new AAExpVirgulaAComando(paexpNode2);
        }
	nodeList.add(pacomandoNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new47() /* reduce AExpOrExp */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PAExp paexpNode1;
        {
            // Block
        PAExp paexpNode2;
        PAExp paexpNode3;
        paexpNode2 = (PAExp)nodeArrayList1.get(0);
        paexpNode3 = (PAExp)nodeArrayList3.get(0);

        paexpNode1 = new AAExpOrAExp(paexpNode2, paexpNode3);
        }
	nodeList.add(paexpNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new48() /* reduce AExpAndExp */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PAExp paexpNode1;
        paexpNode1 = (PAExp)nodeArrayList1.get(0);
	nodeList.add(paexpNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new49() /* reduce AExpAndOpExpAnd */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PAExp paexpNode1;
        {
            // Block
        PAExp paexpNode2;
        PAExp paexpNode3;
        paexpNode2 = (PAExp)nodeArrayList1.get(0);
        paexpNode3 = (PAExp)nodeArrayList3.get(0);

        paexpNode1 = new AAExpAndOrAExp(paexpNode2, paexpNode3);
        }
	nodeList.add(paexpNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new50() /* reduce AExpXorExpAnd */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PAExp paexpNode1;
        paexpNode1 = (PAExp)nodeArrayList1.get(0);
	nodeList.add(paexpNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new51() /* reduce AExpXorOpExpXor */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PAExp paexpNode1;
        {
            // Block
        PAExp paexpNode2;
        PAExp paexpNode3;
        paexpNode2 = (PAExp)nodeArrayList1.get(0);
        paexpNode3 = (PAExp)nodeArrayList3.get(0);

        paexpNode1 = new AAExpXorOpAExp(paexpNode2, paexpNode3);
        }
	nodeList.add(paexpNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new52() /* reduce AExpIgualdadeExpXor */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PAExp paexpNode1;
        paexpNode1 = (PAExp)nodeArrayList1.get(0);
	nodeList.add(paexpNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new53() /* reduce AExpIgualExpIgualdade */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PAExp paexpNode1;
        {
            // Block
        PAExp paexpNode2;
        PAExp paexpNode3;
        paexpNode2 = (PAExp)nodeArrayList1.get(0);
        paexpNode3 = (PAExp)nodeArrayList3.get(0);

        paexpNode1 = new AAExpIgualAExp(paexpNode2, paexpNode3);
        }
	nodeList.add(paexpNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new54() /* reduce AExpDifExpIgualdade */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PAExp paexpNode1;
        {
            // Block
        PAExp paexpNode2;
        PAExp paexpNode3;
        paexpNode2 = (PAExp)nodeArrayList1.get(0);
        paexpNode3 = (PAExp)nodeArrayList3.get(0);

        paexpNode1 = new AAExpDifAExp(paexpNode2, paexpNode3);
        }
	nodeList.add(paexpNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new55() /* reduce AExpRelacionalExpIgualdade */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PAExp paexpNode1;
        paexpNode1 = (PAExp)nodeArrayList1.get(0);
	nodeList.add(paexpNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new56() /* reduce AExpMenorExpRelacional */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PAExp paexpNode1;
        {
            // Block
        PAExp paexpNode2;
        PAExp paexpNode3;
        paexpNode2 = (PAExp)nodeArrayList1.get(0);
        paexpNode3 = (PAExp)nodeArrayList3.get(0);

        paexpNode1 = new AAExpMenorAExp(paexpNode2, paexpNode3);
        }
	nodeList.add(paexpNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new57() /* reduce AExpMaiorExpRelacional */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PAExp paexpNode1;
        {
            // Block
        PAExp paexpNode2;
        PAExp paexpNode3;
        paexpNode2 = (PAExp)nodeArrayList1.get(0);
        paexpNode3 = (PAExp)nodeArrayList3.get(0);

        paexpNode1 = new AAExpMaiorAExp(paexpNode2, paexpNode3);
        }
	nodeList.add(paexpNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new58() /* reduce AExpMenIgualExpRelacional */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PAExp paexpNode1;
        {
            // Block
        PAExp paexpNode2;
        PAExp paexpNode3;
        paexpNode2 = (PAExp)nodeArrayList1.get(0);
        paexpNode3 = (PAExp)nodeArrayList3.get(0);

        paexpNode1 = new AAExpMenIgualAExp(paexpNode2, paexpNode3);
        }
	nodeList.add(paexpNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new59() /* reduce AExpMaiIgualExpRelacional */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PAExp paexpNode1;
        {
            // Block
        PAExp paexpNode2;
        PAExp paexpNode3;
        paexpNode2 = (PAExp)nodeArrayList1.get(0);
        paexpNode3 = (PAExp)nodeArrayList3.get(0);

        paexpNode1 = new AAExpMaiIgualAExp(paexpNode2, paexpNode3);
        }
	nodeList.add(paexpNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new60() /* reduce AExpAditivoExpRelacional */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PAExp paexpNode1;
        paexpNode1 = (PAExp)nodeArrayList1.get(0);
	nodeList.add(paexpNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new61() /* reduce AExpSomaExpAditivo */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PAExp paexpNode1;
        {
            // Block
        PAExp paexpNode2;
        PAExp paexpNode3;
        paexpNode2 = (PAExp)nodeArrayList1.get(0);
        paexpNode3 = (PAExp)nodeArrayList3.get(0);

        paexpNode1 = new AAExpSomaAExp(paexpNode2, paexpNode3);
        }
	nodeList.add(paexpNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new62() /* reduce AExpMenosExpAditivo */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PAExp paexpNode1;
        {
            // Block
        PAExp paexpNode2;
        PAExp paexpNode3;
        paexpNode2 = (PAExp)nodeArrayList1.get(0);
        paexpNode3 = (PAExp)nodeArrayList3.get(0);

        paexpNode1 = new AAExpMenosAExp(paexpNode2, paexpNode3);
        }
	nodeList.add(paexpNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new63() /* reduce AExpMultiplicativoExpAditivo */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PAExp paexpNode1;
        paexpNode1 = (PAExp)nodeArrayList1.get(0);
	nodeList.add(paexpNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new64() /* reduce AExpMultExpMultiplicativo */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PAExp paexpNode1;
        {
            // Block
        PAExp paexpNode2;
        PAExp paexpNode3;
        paexpNode2 = (PAExp)nodeArrayList1.get(0);
        paexpNode3 = (PAExp)nodeArrayList3.get(0);

        paexpNode1 = new AAExpMultAExp(paexpNode2, paexpNode3);
        }
	nodeList.add(paexpNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new65() /* reduce AExpDivExpMultiplicativo */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PAExp paexpNode1;
        {
            // Block
        PAExp paexpNode2;
        PAExp paexpNode3;
        paexpNode2 = (PAExp)nodeArrayList1.get(0);
        paexpNode3 = (PAExp)nodeArrayList3.get(0);

        paexpNode1 = new AAExpDivAExp(paexpNode2, paexpNode3);
        }
	nodeList.add(paexpNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new66() /* reduce AExpDivIntExpMultiplicativo */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PAExp paexpNode1;
        {
            // Block
        PAExp paexpNode2;
        PAExp paexpNode3;
        paexpNode2 = (PAExp)nodeArrayList1.get(0);
        paexpNode3 = (PAExp)nodeArrayList3.get(0);

        paexpNode1 = new AAExpDivIntAExp(paexpNode2, paexpNode3);
        }
	nodeList.add(paexpNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new67() /* reduce AExpUnarioExpMultiplicativo */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PAExp paexpNode1;
        paexpNode1 = (PAExp)nodeArrayList1.get(0);
	nodeList.add(paexpNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new68() /* reduce AExpNegativoExpUnario */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PAExp paexpNode1;
        {
            // Block
        PAExp paexpNode2;
        paexpNode2 = (PAExp)nodeArrayList2.get(0);

        paexpNode1 = new AAExpNegativoAExp(paexpNode2);
        }
	nodeList.add(paexpNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new69() /* reduce AExpNotExpUnario */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PAExp paexpNode1;
        {
            // Block
        PAExp paexpNode2;
        paexpNode2 = (PAExp)nodeArrayList2.get(0);

        paexpNode1 = new AAExpNotAExp(paexpNode2);
        }
	nodeList.add(paexpNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new70() /* reduce AExpTermExpUnario */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PAExp paexpNode1;
        paexpNode1 = (PAExp)nodeArrayList1.get(0);
	nodeList.add(paexpNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new71() /* reduce AVarExpTerm */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PAExp paexpNode1;
        {
            // Block
        PAVar pavarNode2;
        pavarNode2 = (PAVar)nodeArrayList1.get(0);

        paexpNode1 = new AAExpVarAExp(pavarNode2);
        }
	nodeList.add(paexpNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new72() /* reduce AParentesesExpTerm */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PAExp paexpNode1;
        paexpNode1 = (PAExp)nodeArrayList2.get(0);
	nodeList.add(paexpNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new73() /* reduce AValorExpTerm */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PAExp paexpNode1;
        paexpNode1 = (PAExp)nodeArrayList1.get(0);
	nodeList.add(paexpNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new74() /* reduce ATerminal$Declaracao */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        LinkedList<Object> listNode2 = new LinkedList<Object>();
        {
            // Block
        PADeclaracao padeclaracaoNode1;
        padeclaracaoNode1 = (PADeclaracao)nodeArrayList1.get(0);
	if(padeclaracaoNode1 != null)
	{
	  listNode2.add(padeclaracaoNode1);
	}
        }
	nodeList.add(listNode2);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new75() /* reduce ANonTerminal$Declaracao */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        LinkedList<Object> listNode3 = new LinkedList<Object>();
        {
            // Block
        LinkedList<Object> listNode1 = new LinkedList<Object>();
        PADeclaracao padeclaracaoNode2;
        listNode1 = (LinkedList)nodeArrayList1.get(0);
        padeclaracaoNode2 = (PADeclaracao)nodeArrayList2.get(0);
	if(listNode1 != null)
	{
	  listNode3.addAll(listNode1);
	}
	if(padeclaracaoNode2 != null)
	{
	  listNode3.add(padeclaracaoNode2);
	}
        }
	nodeList.add(listNode3);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new76() /* reduce ATerminal$TermosMatriz */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        LinkedList<Object> listNode2 = new LinkedList<Object>();
        {
            // Block
        PADeclaracao padeclaracaoNode1;
        padeclaracaoNode1 = (PADeclaracao)nodeArrayList1.get(0);
	if(padeclaracaoNode1 != null)
	{
	  listNode2.add(padeclaracaoNode1);
	}
        }
	nodeList.add(listNode2);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new77() /* reduce ANonTerminal$TermosMatriz */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        LinkedList<Object> listNode3 = new LinkedList<Object>();
        {
            // Block
        LinkedList<Object> listNode1 = new LinkedList<Object>();
        PADeclaracao padeclaracaoNode2;
        listNode1 = (LinkedList)nodeArrayList1.get(0);
        padeclaracaoNode2 = (PADeclaracao)nodeArrayList2.get(0);
	if(listNode1 != null)
	{
	  listNode3.addAll(listNode1);
	}
	if(padeclaracaoNode2 != null)
	{
	  listNode3.add(padeclaracaoNode2);
	}
        }
	nodeList.add(listNode3);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new78() /* reduce ATerminal$Comando */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        LinkedList<Object> listNode2 = new LinkedList<Object>();
        {
            // Block
        PAComando pacomandoNode1;
        pacomandoNode1 = (PAComando)nodeArrayList1.get(0);
	if(pacomandoNode1 != null)
	{
	  listNode2.add(pacomandoNode1);
	}
        }
	nodeList.add(listNode2);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new79() /* reduce ANonTerminal$Comando */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        LinkedList<Object> listNode3 = new LinkedList<Object>();
        {
            // Block
        LinkedList<Object> listNode1 = new LinkedList<Object>();
        PAComando pacomandoNode2;
        listNode1 = (LinkedList)nodeArrayList1.get(0);
        pacomandoNode2 = (PAComando)nodeArrayList2.get(0);
	if(listNode1 != null)
	{
	  listNode3.addAll(listNode1);
	}
	if(pacomandoNode2 != null)
	{
	  listNode3.add(pacomandoNode2);
	}
        }
	nodeList.add(listNode3);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new80() /* reduce ATerminal$VirgulaExp */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        LinkedList<Object> listNode2 = new LinkedList<Object>();
        {
            // Block
        PAVar pavarNode1;
        pavarNode1 = (PAVar)nodeArrayList1.get(0);
	if(pavarNode1 != null)
	{
	  listNode2.add(pavarNode1);
	}
        }
	nodeList.add(listNode2);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new81() /* reduce ANonTerminal$VirgulaExp */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        LinkedList<Object> listNode3 = new LinkedList<Object>();
        {
            // Block
        LinkedList<Object> listNode1 = new LinkedList<Object>();
        PAVar pavarNode2;
        listNode1 = (LinkedList)nodeArrayList1.get(0);
        pavarNode2 = (PAVar)nodeArrayList2.get(0);
	if(listNode1 != null)
	{
	  listNode3.addAll(listNode1);
	}
	if(pavarNode2 != null)
	{
	  listNode3.add(pavarNode2);
	}
        }
	nodeList.add(listNode3);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new82() /* reduce ATerminal$VarVirgula */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        LinkedList<Object> listNode2 = new LinkedList<Object>();
        {
            // Block
        PAComando pacomandoNode1;
        pacomandoNode1 = (PAComando)nodeArrayList1.get(0);
	if(pacomandoNode1 != null)
	{
	  listNode2.add(pacomandoNode1);
	}
        }
	nodeList.add(listNode2);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new83() /* reduce ANonTerminal$VarVirgula */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        LinkedList<Object> listNode3 = new LinkedList<Object>();
        {
            // Block
        LinkedList<Object> listNode1 = new LinkedList<Object>();
        PAComando pacomandoNode2;
        listNode1 = (LinkedList)nodeArrayList1.get(0);
        pacomandoNode2 = (PAComando)nodeArrayList2.get(0);
	if(listNode1 != null)
	{
	  listNode3.addAll(listNode1);
	}
	if(pacomandoNode2 != null)
	{
	  listNode3.add(pacomandoNode2);
	}
        }
	nodeList.add(listNode3);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new84() /* reduce ATerminal$ExpVirgula */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        LinkedList<Object> listNode2 = new LinkedList<Object>();
        {
            // Block
        PAComando pacomandoNode1;
        pacomandoNode1 = (PAComando)nodeArrayList1.get(0);
	if(pacomandoNode1 != null)
	{
	  listNode2.add(pacomandoNode1);
	}
        }
	nodeList.add(listNode2);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new85() /* reduce ANonTerminal$ExpVirgula */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        LinkedList<Object> listNode3 = new LinkedList<Object>();
        {
            // Block
        LinkedList<Object> listNode1 = new LinkedList<Object>();
        PAComando pacomandoNode2;
        listNode1 = (LinkedList)nodeArrayList1.get(0);
        pacomandoNode2 = (PAComando)nodeArrayList2.get(0);
	if(listNode1 != null)
	{
	  listNode3.addAll(listNode1);
	}
	if(pacomandoNode2 != null)
	{
	  listNode3.add(pacomandoNode2);
	}
        }
	nodeList.add(listNode3);
        return nodeList;
    }



    private static int[][][] actionTable;
/*      {
			{{-1, ERROR, 0}, {0, SHIFT, 1}, },
			{{-1, ERROR, 1}, {1, SHIFT, 3}, },
			{{-1, ERROR, 2}, {68, ACCEPT, -1}, },
			{{-1, ERROR, 3}, {2, SHIFT, 4}, },
			{{-1, ERROR, 4}, {67, SHIFT, 5}, },
			{{-1, ERROR, 5}, {59, SHIFT, 6}, },
			{{-1, REDUCE, 0}, {3, SHIFT, 7}, {5, SHIFT, 8}, },
			{{-1, ERROR, 7}, {4, SHIFT, 11}, },
			{{-1, ERROR, 8}, {6, SHIFT, 12}, },
			{{-1, REDUCE, 1}, {5, SHIFT, 8}, },
			{{-1, REDUCE, 2}, },
			{{-1, ERROR, 11}, {61, SHIFT, 14}, },
			{{-1, ERROR, 12}, {7, SHIFT, 15}, },
			{{-1, REDUCE, 3}, },
			{{-1, ERROR, 14}, {12, SHIFT, 16}, {13, SHIFT, 17}, {14, SHIFT, 18}, },
			{{-1, ERROR, 15}, {61, SHIFT, 21}, },
			{{-1, ERROR, 16}, {35, SHIFT, 22}, {36, SHIFT, 23}, {37, SHIFT, 24}, },
			{{-1, ERROR, 17}, {35, SHIFT, 22}, {36, SHIFT, 23}, {37, SHIFT, 24}, },
			{{-1, ERROR, 18}, {15, SHIFT, 27}, },
			{{-1, REDUCE, 74}, },
			{{-1, REDUCE, 4}, {12, SHIFT, 16}, {13, SHIFT, 17}, {14, SHIFT, 18}, },
			{{-1, ERROR, 21}, {17, SHIFT, 29}, {18, SHIFT, 30}, {19, SHIFT, 31}, {25, SHIFT, 32}, {27, SHIFT, 33}, {32, SHIFT, 34}, {33, SHIFT, 35}, {67, SHIFT, 36}, },
			{{-1, REDUCE, 12}, },
			{{-1, REDUCE, 14}, },
			{{-1, REDUCE, 13}, },
			{{-1, ERROR, 25}, {67, SHIFT, 41}, },
			{{-1, ERROR, 26}, {67, SHIFT, 42}, },
			{{-1, ERROR, 27}, {35, SHIFT, 22}, {36, SHIFT, 23}, {37, SHIFT, 24}, },
			{{-1, REDUCE, 75}, },
			{{-1, ERROR, 29}, {55, SHIFT, 44}, },
			{{-1, ERROR, 30}, {55, SHIFT, 45}, },
			{{-1, ERROR, 31}, {20, SHIFT, 46}, },
			{{-1, ERROR, 32}, {26, SHIFT, 47}, },
			{{-1, ERROR, 33}, {67, SHIFT, 48}, },
			{{-1, ERROR, 34}, {62, SHIFT, 50}, },
			{{-1, ERROR, 35}, {29, SHIFT, 51}, },
			{{-1, REDUCE, 15}, {53, SHIFT, 52}, {55, SHIFT, 53}, },
			{{-1, ERROR, 37}, {54, SHIFT, 54}, },
			{{-1, REDUCE, 78}, },
			{{-1, REDUCE, 23}, },
			{{-1, ERROR, 40}, {8, SHIFT, 55}, {17, SHIFT, 29}, {18, SHIFT, 30}, {19, SHIFT, 31}, {25, SHIFT, 32}, {27, SHIFT, 33}, {32, SHIFT, 34}, {33, SHIFT, 35}, {67, SHIFT, 36}, },
			{{-1, ERROR, 41}, {62, SHIFT, 57}, },
			{{-1, ERROR, 42}, {53, SHIFT, 58}, {62, SHIFT, 59}, },
			{{-1, ERROR, 43}, {55, SHIFT, 61}, },
			{{-1, ERROR, 44}, {67, SHIFT, 48}, },
			{{-1, ERROR, 45}, {39, SHIFT, 65}, {49, SHIFT, 66}, {55, SHIFT, 67}, {63, SHIFT, 68}, {64, SHIFT, 69}, {65, SHIFT, 70}, {66, SHIFT, 71}, {67, SHIFT, 48}, },
			{{-1, ERROR, 46}, {21, SHIFT, 85}, },
			{{-1, ERROR, 47}, {25, SHIFT, 86}, },
			{{-1, REDUCE, 15}, {55, SHIFT, 53}, },
			{{-1, ERROR, 49}, {28, SHIFT, 87}, },
			{{-1, REDUCE, 37}, },
			{{-1, ERROR, 51}, {31, SHIFT, 88}, },
			{{-1, ERROR, 52}, {39, SHIFT, 65}, {49, SHIFT, 66}, {55, SHIFT, 67}, {63, SHIFT, 68}, {64, SHIFT, 69}, {65, SHIFT, 70}, {66, SHIFT, 71}, {67, SHIFT, 48}, },
			{{-1, ERROR, 53}, {39, SHIFT, 65}, {49, SHIFT, 66}, {55, SHIFT, 67}, {63, SHIFT, 68}, {64, SHIFT, 69}, {65, SHIFT, 70}, {66, SHIFT, 71}, {67, SHIFT, 48}, },
			{{-1, ERROR, 54}, {39, SHIFT, 65}, {49, SHIFT, 66}, {55, SHIFT, 67}, {63, SHIFT, 68}, {64, SHIFT, 69}, {65, SHIFT, 70}, {66, SHIFT, 71}, {67, SHIFT, 48}, },
			{{-1, ERROR, 55}, {9, SHIFT, 92}, },
			{{-1, REDUCE, 79}, },
			{{-1, REDUCE, 5}, },
			{{-1, ERROR, 58}, {39, SHIFT, 65}, {49, SHIFT, 66}, {55, SHIFT, 67}, {63, SHIFT, 68}, {64, SHIFT, 69}, {65, SHIFT, 70}, {66, SHIFT, 71}, {67, SHIFT, 48}, },
			{{-1, REDUCE, 6}, },
			{{-1, ERROR, 60}, {62, SHIFT, 94}, },
			{{-1, ERROR, 61}, {39, SHIFT, 65}, {49, SHIFT, 66}, {55, SHIFT, 67}, {63, SHIFT, 68}, {64, SHIFT, 69}, {65, SHIFT, 70}, {66, SHIFT, 71}, {67, SHIFT, 48}, },
			{{-1, ERROR, 62}, {56, SHIFT, 96}, {60, SHIFT, 97}, },
			{{-1, REDUCE, 82}, },
			{{-1, ERROR, 64}, {67, SHIFT, 48}, },
			{{-1, ERROR, 65}, {39, SHIFT, 65}, {49, SHIFT, 66}, {55, SHIFT, 67}, {63, SHIFT, 68}, {64, SHIFT, 69}, {65, SHIFT, 70}, {66, SHIFT, 71}, {67, SHIFT, 48}, },
			{{-1, ERROR, 66}, {39, SHIFT, 65}, {49, SHIFT, 66}, {55, SHIFT, 67}, {63, SHIFT, 68}, {64, SHIFT, 69}, {65, SHIFT, 70}, {66, SHIFT, 71}, {67, SHIFT, 48}, },
			{{-1, ERROR, 67}, {39, SHIFT, 65}, {49, SHIFT, 66}, {55, SHIFT, 67}, {63, SHIFT, 68}, {64, SHIFT, 69}, {65, SHIFT, 70}, {66, SHIFT, 71}, {67, SHIFT, 48}, },
			{{-1, REDUCE, 20}, },
			{{-1, REDUCE, 22}, },
			{{-1, REDUCE, 19}, },
			{{-1, REDUCE, 21}, },
			{{-1, REDUCE, 71}, },
			{{-1, REDUCE, 73}, },
			{{-1, REDUCE, 84}, },
			{{-1, ERROR, 75}, {51, SHIFT, 103}, {56, SHIFT, 104}, {60, SHIFT, 105}, },
			{{-1, REDUCE, 48}, {50, SHIFT, 106}, },
			{{-1, REDUCE, 50}, {52, SHIFT, 107}, },
			{{-1, REDUCE, 52}, {43, SHIFT, 108}, {44, SHIFT, 109}, },
			{{-1, REDUCE, 55}, {45, SHIFT, 110}, {46, SHIFT, 111}, {47, SHIFT, 112}, {48, SHIFT, 113}, },
			{{-1, REDUCE, 60}, {38, SHIFT, 114}, {39, SHIFT, 115}, },
			{{-1, REDUCE, 63}, {40, SHIFT, 116}, {41, SHIFT, 117}, {42, SHIFT, 118}, },
			{{-1, REDUCE, 67}, },
			{{-1, REDUCE, 70}, },
			{{-1, ERROR, 84}, {39, SHIFT, 65}, {49, SHIFT, 66}, {55, SHIFT, 67}, {63, SHIFT, 68}, {64, SHIFT, 69}, {65, SHIFT, 70}, {66, SHIFT, 71}, {67, SHIFT, 48}, },
			{{-1, ERROR, 85}, {22, SHIFT, 121}, },
			{{-1, ERROR, 86}, {55, SHIFT, 122}, },
			{{-1, ERROR, 87}, {39, SHIFT, 65}, {49, SHIFT, 66}, {55, SHIFT, 67}, {63, SHIFT, 68}, {64, SHIFT, 69}, {65, SHIFT, 70}, {66, SHIFT, 71}, {67, SHIFT, 48}, },
			{{-1, ERROR, 88}, {34, SHIFT, 124}, },
			{{-1, ERROR, 89}, {51, SHIFT, 103}, {62, SHIFT, 125}, },
			{{-1, ERROR, 90}, {51, SHIFT, 103}, {56, SHIFT, 126}, {60, SHIFT, 127}, },
			{{-1, ERROR, 91}, {51, SHIFT, 103}, {62, SHIFT, 130}, },
			{{-1, ERROR, 92}, {10, SHIFT, 131}, },
			{{-1, REDUCE, 44}, {51, SHIFT, 103}, },
			{{-1, REDUCE, 7}, },
			{{-1, ERROR, 95}, {16, SHIFT, 132}, {51, SHIFT, 103}, {56, SHIFT, 133}, },
			{{-1, ERROR, 96}, {62, SHIFT, 136}, },
			{{-1, REDUCE, 45}, },
			{{-1, ERROR, 98}, {56, SHIFT, 137}, {60, SHIFT, 97}, },
			{{-1, REDUCE, 83}, },
			{{-1, REDUCE, 68}, },
			{{-1, REDUCE, 69}, },
			{{-1, ERROR, 102}, {51, SHIFT, 103}, {56, SHIFT, 138}, },
			{{-1, ERROR, 103}, {39, SHIFT, 65}, {49, SHIFT, 66}, {55, SHIFT, 67}, {63, SHIFT, 68}, {64, SHIFT, 69}, {65, SHIFT, 70}, {66, SHIFT, 71}, {67, SHIFT, 48}, },
			{{-1, ERROR, 104}, {62, SHIFT, 140}, },
			{{-1, REDUCE, 46}, },
			{{-1, ERROR, 106}, {39, SHIFT, 65}, {49, SHIFT, 66}, {55, SHIFT, 67}, {63, SHIFT, 68}, {64, SHIFT, 69}, {65, SHIFT, 70}, {66, SHIFT, 71}, {67, SHIFT, 48}, },
			{{-1, ERROR, 107}, {39, SHIFT, 65}, {49, SHIFT, 66}, {55, SHIFT, 67}, {63, SHIFT, 68}, {64, SHIFT, 69}, {65, SHIFT, 70}, {66, SHIFT, 71}, {67, SHIFT, 48}, },
			{{-1, ERROR, 108}, {39, SHIFT, 65}, {49, SHIFT, 66}, {55, SHIFT, 67}, {63, SHIFT, 68}, {64, SHIFT, 69}, {65, SHIFT, 70}, {66, SHIFT, 71}, {67, SHIFT, 48}, },
			{{-1, ERROR, 109}, {39, SHIFT, 65}, {49, SHIFT, 66}, {55, SHIFT, 67}, {63, SHIFT, 68}, {64, SHIFT, 69}, {65, SHIFT, 70}, {66, SHIFT, 71}, {67, SHIFT, 48}, },
			{{-1, ERROR, 110}, {39, SHIFT, 65}, {49, SHIFT, 66}, {55, SHIFT, 67}, {63, SHIFT, 68}, {64, SHIFT, 69}, {65, SHIFT, 70}, {66, SHIFT, 71}, {67, SHIFT, 48}, },
			{{-1, ERROR, 111}, {39, SHIFT, 65}, {49, SHIFT, 66}, {55, SHIFT, 67}, {63, SHIFT, 68}, {64, SHIFT, 69}, {65, SHIFT, 70}, {66, SHIFT, 71}, {67, SHIFT, 48}, },
			{{-1, ERROR, 112}, {39, SHIFT, 65}, {49, SHIFT, 66}, {55, SHIFT, 67}, {63, SHIFT, 68}, {64, SHIFT, 69}, {65, SHIFT, 70}, {66, SHIFT, 71}, {67, SHIFT, 48}, },
			{{-1, ERROR, 113}, {39, SHIFT, 65}, {49, SHIFT, 66}, {55, SHIFT, 67}, {63, SHIFT, 68}, {64, SHIFT, 69}, {65, SHIFT, 70}, {66, SHIFT, 71}, {67, SHIFT, 48}, },
			{{-1, ERROR, 114}, {39, SHIFT, 65}, {49, SHIFT, 66}, {55, SHIFT, 67}, {63, SHIFT, 68}, {64, SHIFT, 69}, {65, SHIFT, 70}, {66, SHIFT, 71}, {67, SHIFT, 48}, },
			{{-1, ERROR, 115}, {39, SHIFT, 65}, {49, SHIFT, 66}, {55, SHIFT, 67}, {63, SHIFT, 68}, {64, SHIFT, 69}, {65, SHIFT, 70}, {66, SHIFT, 71}, {67, SHIFT, 48}, },
			{{-1, ERROR, 116}, {39, SHIFT, 65}, {49, SHIFT, 66}, {55, SHIFT, 67}, {63, SHIFT, 68}, {64, SHIFT, 69}, {65, SHIFT, 70}, {66, SHIFT, 71}, {67, SHIFT, 48}, },
			{{-1, ERROR, 117}, {39, SHIFT, 65}, {49, SHIFT, 66}, {55, SHIFT, 67}, {63, SHIFT, 68}, {64, SHIFT, 69}, {65, SHIFT, 70}, {66, SHIFT, 71}, {67, SHIFT, 48}, },
			{{-1, ERROR, 118}, {39, SHIFT, 65}, {49, SHIFT, 66}, {55, SHIFT, 67}, {63, SHIFT, 68}, {64, SHIFT, 69}, {65, SHIFT, 70}, {66, SHIFT, 71}, {67, SHIFT, 48}, },
			{{-1, REDUCE, 85}, },
			{{-1, ERROR, 120}, {51, SHIFT, 103}, {56, SHIFT, 154}, {60, SHIFT, 105}, },
			{{-1, ERROR, 121}, {55, SHIFT, 155}, },
			{{-1, ERROR, 122}, {39, SHIFT, 65}, {49, SHIFT, 66}, {55, SHIFT, 67}, {63, SHIFT, 68}, {64, SHIFT, 69}, {65, SHIFT, 70}, {66, SHIFT, 71}, {67, SHIFT, 48}, },
			{{-1, ERROR, 123}, {29, SHIFT, 157}, {51, SHIFT, 103}, },
			{{-1, ERROR, 124}, {62, SHIFT, 158}, },
			{{-1, REDUCE, 32}, },
			{{-1, REDUCE, 16}, },
			{{-1, ERROR, 127}, {39, SHIFT, 65}, {49, SHIFT, 66}, {55, SHIFT, 67}, {63, SHIFT, 68}, {64, SHIFT, 69}, {65, SHIFT, 70}, {66, SHIFT, 71}, {67, SHIFT, 48}, },
			{{-1, REDUCE, 80}, },
			{{-1, ERROR, 129}, {56, SHIFT, 160}, {60, SHIFT, 127}, },
			{{-1, REDUCE, 31}, },
			{{-1, ERROR, 131}, {11, SHIFT, 162}, },
			{{-1, ERROR, 132}, {39, SHIFT, 65}, {49, SHIFT, 66}, {55, SHIFT, 67}, {63, SHIFT, 68}, {64, SHIFT, 69}, {65, SHIFT, 70}, {66, SHIFT, 71}, {67, SHIFT, 48}, },
			{{-1, ERROR, 133}, {67, SHIFT, 164}, },
			{{-1, REDUCE, 76}, },
			{{-1, ERROR, 135}, {16, SHIFT, 132}, {56, SHIFT, 165}, },
			{{-1, REDUCE, 33}, },
			{{-1, ERROR, 137}, {62, SHIFT, 167}, },
			{{-1, REDUCE, 72}, },
			{{-1, REDUCE, 47}, {50, SHIFT, 106}, },
			{{-1, REDUCE, 35}, },
			{{-1, REDUCE, 49}, {52, SHIFT, 107}, },
			{{-1, REDUCE, 51}, {43, SHIFT, 108}, {44, SHIFT, 109}, },
			{{-1, REDUCE, 53}, {45, SHIFT, 110}, {46, SHIFT, 111}, {47, SHIFT, 112}, {48, SHIFT, 113}, },
			{{-1, REDUCE, 54}, {45, SHIFT, 110}, {46, SHIFT, 111}, {47, SHIFT, 112}, {48, SHIFT, 113}, },
			{{-1, REDUCE, 58}, {38, SHIFT, 114}, {39, SHIFT, 115}, },
			{{-1, REDUCE, 59}, {38, SHIFT, 114}, {39, SHIFT, 115}, },
			{{-1, REDUCE, 56}, {38, SHIFT, 114}, {39, SHIFT, 115}, },
			{{-1, REDUCE, 57}, {38, SHIFT, 114}, {39, SHIFT, 115}, },
			{{-1, REDUCE, 61}, {40, SHIFT, 116}, {41, SHIFT, 117}, {42, SHIFT, 118}, },
			{{-1, REDUCE, 62}, {40, SHIFT, 116}, {41, SHIFT, 117}, {42, SHIFT, 118}, },
			{{-1, REDUCE, 64}, },
			{{-1, REDUCE, 65}, },
			{{-1, REDUCE, 66}, },
			{{-1, ERROR, 154}, {62, SHIFT, 168}, },
			{{-1, ERROR, 155}, {39, SHIFT, 65}, {49, SHIFT, 66}, {55, SHIFT, 67}, {63, SHIFT, 68}, {64, SHIFT, 69}, {65, SHIFT, 70}, {66, SHIFT, 71}, {67, SHIFT, 48}, },
			{{-1, ERROR, 156}, {51, SHIFT, 103}, {56, SHIFT, 170}, },
			{{-1, ERROR, 157}, {39, SHIFT, 65}, {49, SHIFT, 66}, {55, SHIFT, 67}, {63, SHIFT, 68}, {64, SHIFT, 69}, {65, SHIFT, 70}, {66, SHIFT, 71}, {67, SHIFT, 48}, },
			{{-1, REDUCE, 38}, },
			{{-1, REDUCE, 43}, {51, SHIFT, 103}, },
			{{-1, REDUCE, 17}, },
			{{-1, REDUCE, 81}, },
			{{-1, ERROR, 162}, {59, SHIFT, 172}, },
			{{-1, REDUCE, 11}, {51, SHIFT, 103}, },
			{{-1, ERROR, 164}, {62, SHIFT, 173}, },
			{{-1, ERROR, 165}, {67, SHIFT, 174}, },
			{{-1, REDUCE, 77}, },
			{{-1, REDUCE, 34}, },
			{{-1, REDUCE, 36}, },
			{{-1, ERROR, 169}, {51, SHIFT, 103}, {56, SHIFT, 175}, },
			{{-1, ERROR, 170}, {23, SHIFT, 176}, },
			{{-1, ERROR, 171}, {30, SHIFT, 177}, {51, SHIFT, 103}, },
			{{-1, REDUCE, 10}, },
			{{-1, REDUCE, 8}, },
			{{-1, ERROR, 174}, {62, SHIFT, 178}, },
			{{-1, ERROR, 175}, {23, SHIFT, 179}, },
			{{-1, ERROR, 176}, {17, SHIFT, 29}, {18, SHIFT, 30}, {32, SHIFT, 34}, {33, SHIFT, 35}, {57, SHIFT, 180}, {67, SHIFT, 36}, },
			{{-1, ERROR, 177}, {39, SHIFT, 65}, {49, SHIFT, 66}, {55, SHIFT, 67}, {63, SHIFT, 68}, {64, SHIFT, 69}, {65, SHIFT, 70}, {66, SHIFT, 71}, {67, SHIFT, 48}, },
			{{-1, REDUCE, 9}, },
			{{-1, ERROR, 179}, {17, SHIFT, 29}, {18, SHIFT, 30}, {32, SHIFT, 34}, {33, SHIFT, 35}, {57, SHIFT, 180}, {67, SHIFT, 36}, },
			{{-1, ERROR, 180}, {12, SHIFT, 16}, {13, SHIFT, 17}, {14, SHIFT, 18}, {17, SHIFT, 29}, {18, SHIFT, 30}, {19, SHIFT, 31}, {25, SHIFT, 32}, {27, SHIFT, 33}, {32, SHIFT, 34}, {33, SHIFT, 35}, {58, SHIFT, 186}, {67, SHIFT, 36}, },
			{{-1, REDUCE, 26}, },
			{{-1, REDUCE, 29}, },
			{{-1, REDUCE, 30}, },
			{{-1, ERROR, 184}, {23, SHIFT, 189}, {51, SHIFT, 103}, },
			{{-1, REDUCE, 24}, {24, SHIFT, 190}, },
			{{-1, REDUCE, 39}, },
			{{-1, ERROR, 187}, {12, SHIFT, 16}, {13, SHIFT, 17}, {14, SHIFT, 18}, {17, SHIFT, 29}, {18, SHIFT, 30}, {19, SHIFT, 31}, {25, SHIFT, 32}, {27, SHIFT, 33}, {32, SHIFT, 34}, {33, SHIFT, 35}, {58, SHIFT, 192}, {67, SHIFT, 36}, },
			{{-1, ERROR, 188}, {17, SHIFT, 29}, {18, SHIFT, 30}, {19, SHIFT, 31}, {25, SHIFT, 32}, {27, SHIFT, 33}, {32, SHIFT, 34}, {33, SHIFT, 35}, {58, SHIFT, 194}, {67, SHIFT, 36}, },
			{{-1, ERROR, 189}, {17, SHIFT, 29}, {18, SHIFT, 30}, {32, SHIFT, 34}, {33, SHIFT, 35}, {57, SHIFT, 180}, {67, SHIFT, 36}, },
			{{-1, ERROR, 190}, {23, SHIFT, 196}, },
			{{-1, REDUCE, 25}, },
			{{-1, REDUCE, 40}, },
			{{-1, ERROR, 193}, {17, SHIFT, 29}, {18, SHIFT, 30}, {19, SHIFT, 31}, {25, SHIFT, 32}, {27, SHIFT, 33}, {32, SHIFT, 34}, {33, SHIFT, 35}, {58, SHIFT, 197}, {67, SHIFT, 36}, },
			{{-1, REDUCE, 41}, },
			{{-1, REDUCE, 27}, },
			{{-1, ERROR, 196}, {17, SHIFT, 29}, {18, SHIFT, 30}, {32, SHIFT, 34}, {33, SHIFT, 35}, {57, SHIFT, 180}, {67, SHIFT, 36}, },
			{{-1, REDUCE, 42}, },
			{{-1, REDUCE, 28}, },
        };*/
    private static int[][][] gotoTable;
/*      {
			{{-1, 2}, },
			{{-1, 9}, },
			{{-1, 19}, {20, 28}, {187, 28}, },
			{{-1, 10}, {9, 13}, },
			{{-1, 134}, {135, 166}, },
			{{-1, 25}, {17, 26}, {27, 43}, },
			{{-1, 72}, {21, 37}, {33, 49}, {40, 37}, {44, 62}, {64, 98}, {176, 37}, {179, 37}, {180, 37}, {187, 37}, {188, 37}, {189, 37}, {193, 37}, {196, 37}, },
			{{-1, -1}, },
			{{-1, 73}, },
			{{-1, 38}, {40, 56}, {188, 56}, {193, 56}, },
			{{-1, 191}, },
			{{-1, 181}, {179, 185}, {189, 195}, {196, 198}, },
			{{-1, 39}, {176, 182}, {179, 182}, {189, 182}, {196, 182}, },
			{{-1, 183}, },
			{{-1, 128}, {129, 161}, },
			{{-1, 60}, },
			{{-1, 63}, {64, 99}, },
			{{-1, 74}, {84, 119}, },
			{{-1, 75}, {52, 89}, {53, 90}, {54, 91}, {58, 93}, {61, 95}, {67, 102}, {84, 120}, {87, 123}, {122, 156}, {127, 159}, {132, 163}, {155, 169}, {157, 171}, {177, 184}, },
			{{-1, 76}, {103, 139}, },
			{{-1, 77}, {106, 141}, },
			{{-1, 78}, {107, 142}, },
			{{-1, 79}, {108, 143}, {109, 144}, },
			{{-1, 80}, {110, 145}, {111, 146}, {112, 147}, {113, 148}, },
			{{-1, 81}, {114, 149}, {115, 150}, },
			{{-1, 82}, {65, 100}, {66, 101}, {116, 151}, {117, 152}, {118, 153}, },
			{{-1, 83}, },
			{{-1, 20}, {180, 187}, },
			{{-1, 135}, },
			{{-1, 40}, {180, 188}, {187, 193}, },
			{{-1, 129}, },
			{{-1, 64}, },
			{{-1, 84}, },
        };*/
    private static String[] errorMessages;
/*      {
			"expecting: 'This'",
			"expecting: 'is'",
			"expecting: EOF",
			"expecting: 'program'",
			"expecting: id",
			"expecting: '.'",
			"expecting: 'It', 'Let', EOF",
			"expecting: 'presents'",
			"expecting: 'us'",
			"expecting: 'Let', EOF",
			"expecting: ':'",
			"expecting: 'begin'",
			"expecting: 'alterable', 'unalterable', 'vector'",
			"expecting: 'number', 'answer', 'symbol'",
			"expecting: 'of'",
			"expecting: 'Let', 'alterable', 'unalterable', 'vector', 'capture', 'show', 'just', 'as', 'considering', 'abandon', 'go', ']', id, EOF",
			"expecting: 'Let', 'alterable', 'unalterable', 'vector', EOF",
			"expecting: 'capture', 'show', 'just', 'as', 'considering', 'abandon', 'go', id",
			"expecting: '(', id",
			"expecting: '('",
			"expecting: 'in'",
			"expecting: 'long'",
			"expecting: ';'",
			"expecting: 'to'",
			"expecting: '=', ':=', '('",
			"expecting: ':='",
			"expecting: 'That', 'capture', 'show', 'just', 'as', 'considering', 'abandon', 'go', ']', id",
			"expecting: 'That', 'capture', 'show', 'just', 'as', 'considering', 'abandon', 'go', id",
			"expecting: '=', ';'",
			"expecting: '-', '!', '(', symbol val, answer val, number val, string, id",
			"expecting: 'case'",
			"expecting: 'as'",
			"expecting: 'x', 'do', 'from', 'to', 'by', '+', '-', '*', '/', '//', '==', '!=', '<=', '>=', '<', '>', 'and', 'or', 'xor', '(', ')', ',', ';'",
			"expecting: 'from'",
			"expecting: 'That', 'capture', 'show', 'just', 'otherwise', 'as', 'considering', 'abandon', 'go', ']', id",
			"expecting: 'next'",
			"expecting: 'would'",
			"expecting: ')', ','",
			"expecting: 'x', 'do', 'to', 'by', '+', '-', '*', '/', '//', '==', '!=', '<=', '>=', '<', '>', 'and', 'or', 'xor', ')', ',', ';'",
			"expecting: 'or', ')', ','",
			"expecting: 'x', 'do', 'to', 'by', 'and', 'or', ')', ',', ';'",
			"expecting: 'x', 'do', 'to', 'by', 'and', 'or', 'xor', ')', ',', ';'",
			"expecting: 'x', 'do', 'to', 'by', '==', '!=', 'and', 'or', 'xor', ')', ',', ';'",
			"expecting: 'x', 'do', 'to', 'by', '==', '!=', '<=', '>=', '<', '>', 'and', 'or', 'xor', ')', ',', ';'",
			"expecting: 'x', 'do', 'to', 'by', '+', '-', '==', '!=', '<=', '>=', '<', '>', 'and', 'or', 'xor', ')', ',', ';'",
			"expecting: 'that'",
			"expecting: 'iteration'",
			"expecting: 'or', ';'",
			"expecting: 'be'",
			"expecting: 'x', 'or', ')'",
			"expecting: 'or', ')'",
			"expecting: 'to', 'or'",
			"expecting: 'x', 'do', 'from', 'to', 'by', '+', '-', '*', '/', '//', '==', '!=', '<=', '>=', '<', '>', 'and', 'or', 'xor', ':=', ')', ',', ';'",
			"expecting: 'all'",
			"expecting: 'x', ')'",
			"expecting: 'do'",
			"expecting: 'by', 'or'",
			"expecting: 'capture', 'show', 'abandon', 'go', '[', id",
			"expecting: 'alterable', 'unalterable', 'vector', 'capture', 'show', 'just', 'as', 'considering', 'abandon', 'go', ']', id",
			"expecting: 'do', 'or'",
			"expecting: 'capture', 'show', 'just', 'as', 'considering', 'abandon', 'go', ']', id",
        };*/
    private static int[] errors;
/*      {
			0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 2, 10, 11, 2, 12, 10, 13, 13, 14, 15, 16, 17, 18, 18, 18, 4, 4, 13, 15, 19, 19, 20, 21, 4, 22, 23, 24, 25, 26, 26, 27, 22, 28, 19, 4, 29, 30, 31, 32, 33, 34, 35, 29, 29, 29, 36, 26, 15, 29, 15, 22, 29, 37, 4, 4, 29, 29, 29, 38, 38, 38, 38, 38, 38, 29, 39, 40, 41, 42, 43, 44, 38, 38, 38, 29, 45, 19, 29, 46, 47, 39, 47, 48, 47, 15, 49, 22, 4, 37, 4, 38, 38, 50, 29, 22, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 39, 19, 29, 51, 22, 34, 52, 29, 37, 37, 34, 53, 29, 4, 54, 54, 34, 22, 38, 40, 34, 41, 42, 43, 43, 44, 44, 44, 44, 38, 38, 38, 38, 38, 22, 29, 50, 29, 34, 39, 52, 37, 5, 49, 22, 4, 54, 34, 34, 50, 55, 56, 2, 15, 22, 55, 57, 29, 15, 57, 58, 26, 34, 34, 59, 34, 34, 58, 60, 57, 55, 26, 34, 60, 34, 26, 57, 34, 26, 
        };*/

    static 
    {
        try
        {
            DataInputStream s = new DataInputStream(
                new BufferedInputStream(
                Parser.class.getResourceAsStream("parser.dat")));

            // read actionTable
            int length = s.readInt();
            Parser.actionTable = new int[length][][];
            for(int i = 0; i < Parser.actionTable.length; i++)
            {
                length = s.readInt();
                Parser.actionTable[i] = new int[length][3];
                for(int j = 0; j < Parser.actionTable[i].length; j++)
                {
                for(int k = 0; k < 3; k++)
                {
                    Parser.actionTable[i][j][k] = s.readInt();
                }
                }
            }

            // read gotoTable
            length = s.readInt();
            gotoTable = new int[length][][];
            for(int i = 0; i < gotoTable.length; i++)
            {
                length = s.readInt();
                gotoTable[i] = new int[length][2];
                for(int j = 0; j < gotoTable[i].length; j++)
                {
                for(int k = 0; k < 2; k++)
                {
                    gotoTable[i][j][k] = s.readInt();
                }
                }
            }

            // read errorMessages
            length = s.readInt();
            errorMessages = new String[length];
            for(int i = 0; i < errorMessages.length; i++)
            {
                length = s.readInt();
                StringBuffer buffer = new StringBuffer();

                for(int j = 0; j < length; j++)
                {
                buffer.append(s.readChar());
                }
                errorMessages[i] = buffer.toString();
            }

            // read errors
            length = s.readInt();
            errors = new int[length];
            for(int i = 0; i < errors.length; i++)
            {
                errors[i] = s.readInt();
            }

            s.close();
        }
        catch(Exception e)
        {
            throw new RuntimeException("The file \"parser.dat\" is either missing or corrupted.");
        }
    }
}

/* This file was generated by SableCC (http://www.sablecc.org/). */

package prolixa.analysis;

import java.util.*;
import prolixa.node.*;

public class DepthFirstAdapter extends AnalysisAdapter
{
    public void inStart(Start node)
    {
        defaultIn(node);
    }

    public void outStart(Start node)
    {
        defaultOut(node);
    }

    public void defaultIn(@SuppressWarnings("unused") Node node)
    {
        // Do nothing
    }

    public void defaultOut(@SuppressWarnings("unused") Node node)
    {
        // Do nothing
    }

    @Override
    public void caseStart(Start node)
    {
        inStart(node);
        node.getPAPrograma().apply(this);
        node.getEOF().apply(this);
        outStart(node);
    }

    public void inAArProgramaAPrograma(AArProgramaAPrograma node)
    {
        defaultIn(node);
    }

    public void outAArProgramaAPrograma(AArProgramaAPrograma node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAArProgramaAPrograma(AArProgramaAPrograma node)
    {
        inAArProgramaAPrograma(node);
        if(node.getADeclaracoes() != null)
        {
            node.getADeclaracoes().apply(this);
        }
        if(node.getAComandos() != null)
        {
            node.getAComandos().apply(this);
        }
        outAArProgramaAPrograma(node);
    }

    public void inAArDeclaracoesADeclaracoes(AArDeclaracoesADeclaracoes node)
    {
        defaultIn(node);
    }

    public void outAArDeclaracoesADeclaracoes(AArDeclaracoesADeclaracoes node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAArDeclaracoesADeclaracoes(AArDeclaracoesADeclaracoes node)
    {
        inAArDeclaracoesADeclaracoes(node);
        {
            List<PADeclaracao> copy = new ArrayList<PADeclaracao>(node.getADeclaracao());
            for(PADeclaracao e : copy)
            {
                e.apply(this);
            }
        }
        outAArDeclaracoesADeclaracoes(node);
    }

    public void inAArComandosAComandos(AArComandosAComandos node)
    {
        defaultIn(node);
    }

    public void outAArComandosAComandos(AArComandosAComandos node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAArComandosAComandos(AArComandosAComandos node)
    {
        inAArComandosAComandos(node);
        {
            List<PAComando> copy = new ArrayList<PAComando>(node.getAComando());
            for(PAComando e : copy)
            {
                e.apply(this);
            }
        }
        outAArComandosAComandos(node);
    }

    public void inAAVariavelADeclaracao(AAVariavelADeclaracao node)
    {
        defaultIn(node);
    }

    public void outAAVariavelADeclaracao(AAVariavelADeclaracao node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAAVariavelADeclaracao(AAVariavelADeclaracao node)
    {
        inAAVariavelADeclaracao(node);
        if(node.getTipo() != null)
        {
            node.getTipo().apply(this);
        }
        if(node.getId() != null)
        {
            node.getId().apply(this);
        }
        outAAVariavelADeclaracao(node);
    }

    public void inAAConstanteADeclaracao(AAConstanteADeclaracao node)
    {
        defaultIn(node);
    }

    public void outAAConstanteADeclaracao(AAConstanteADeclaracao node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAAConstanteADeclaracao(AAConstanteADeclaracao node)
    {
        inAAConstanteADeclaracao(node);
        if(node.getTipo() != null)
        {
            node.getTipo().apply(this);
        }
        if(node.getAtribuicaoConst() != null)
        {
            node.getAtribuicaoConst().apply(this);
        }
        if(node.getId() != null)
        {
            node.getId().apply(this);
        }
        outAAConstanteADeclaracao(node);
    }

    public void inAAVetorADeclaracao(AAVetorADeclaracao node)
    {
        defaultIn(node);
    }

    public void outAAVetorADeclaracao(AAVetorADeclaracao node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAAVetorADeclaracao(AAVetorADeclaracao node)
    {
        inAAVetorADeclaracao(node);
        if(node.getTipo() != null)
        {
            node.getTipo().apply(this);
        }
        if(node.getAExp() != null)
        {
            node.getAExp().apply(this);
        }
        {
            List<PADeclaracao> copy = new ArrayList<PADeclaracao>(node.getMatriz());
            for(PADeclaracao e : copy)
            {
                e.apply(this);
            }
        }
        if(node.getId() != null)
        {
            node.getId().apply(this);
        }
        outAAVetorADeclaracao(node);
    }

    public void inAAMatrizADeclaracao(AAMatrizADeclaracao node)
    {
        defaultIn(node);
    }

    public void outAAMatrizADeclaracao(AAMatrizADeclaracao node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAAMatrizADeclaracao(AAMatrizADeclaracao node)
    {
        inAAMatrizADeclaracao(node);
        if(node.getMatriz() != null)
        {
            node.getMatriz().apply(this);
        }
        if(node.getAExp() != null)
        {
            node.getAExp().apply(this);
        }
        outAAMatrizADeclaracao(node);
    }

    public void inAANumberADeclaracao(AANumberADeclaracao node)
    {
        defaultIn(node);
    }

    public void outAANumberADeclaracao(AANumberADeclaracao node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAANumberADeclaracao(AANumberADeclaracao node)
    {
        inAANumberADeclaracao(node);
        if(node.getNumber() != null)
        {
            node.getNumber().apply(this);
        }
        outAANumberADeclaracao(node);
    }

    public void inAASymbolADeclaracao(AASymbolADeclaracao node)
    {
        defaultIn(node);
    }

    public void outAASymbolADeclaracao(AASymbolADeclaracao node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAASymbolADeclaracao(AASymbolADeclaracao node)
    {
        inAASymbolADeclaracao(node);
        if(node.getSymbol() != null)
        {
            node.getSymbol().apply(this);
        }
        outAASymbolADeclaracao(node);
    }

    public void inAAAnswerADeclaracao(AAAnswerADeclaracao node)
    {
        defaultIn(node);
    }

    public void outAAAnswerADeclaracao(AAAnswerADeclaracao node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAAAnswerADeclaracao(AAAnswerADeclaracao node)
    {
        inAAAnswerADeclaracao(node);
        if(node.getAnswer() != null)
        {
            node.getAnswer().apply(this);
        }
        outAAAnswerADeclaracao(node);
    }

    public void inAAAtrConstADeclaracao(AAAtrConstADeclaracao node)
    {
        defaultIn(node);
    }

    public void outAAAtrConstADeclaracao(AAAtrConstADeclaracao node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAAAtrConstADeclaracao(AAAtrConstADeclaracao node)
    {
        inAAAtrConstADeclaracao(node);
        if(node.getAExp() != null)
        {
            node.getAExp().apply(this);
        }
        outAAAtrConstADeclaracao(node);
    }

    public void inAAAtribuicaoConstADeclaracao(AAAtribuicaoConstADeclaracao node)
    {
        defaultIn(node);
    }

    public void outAAAtribuicaoConstADeclaracao(AAAtribuicaoConstADeclaracao node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAAAtribuicaoConstADeclaracao(AAAtribuicaoConstADeclaracao node)
    {
        inAAAtribuicaoConstADeclaracao(node);
        if(node.getAExp() != null)
        {
            node.getAExp().apply(this);
        }
        outAAAtribuicaoConstADeclaracao(node);
    }

    public void inAAExpOrAExp(AAExpOrAExp node)
    {
        defaultIn(node);
    }

    public void outAAExpOrAExp(AAExpOrAExp node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAAExpOrAExp(AAExpOrAExp node)
    {
        inAAExpOrAExp(node);
        if(node.getDir() != null)
        {
            node.getDir().apply(this);
        }
        if(node.getEsq() != null)
        {
            node.getEsq().apply(this);
        }
        outAAExpOrAExp(node);
    }

    public void inAAExpAndOrAExp(AAExpAndOrAExp node)
    {
        defaultIn(node);
    }

    public void outAAExpAndOrAExp(AAExpAndOrAExp node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAAExpAndOrAExp(AAExpAndOrAExp node)
    {
        inAAExpAndOrAExp(node);
        if(node.getDir() != null)
        {
            node.getDir().apply(this);
        }
        if(node.getEsq() != null)
        {
            node.getEsq().apply(this);
        }
        outAAExpAndOrAExp(node);
    }

    public void inAAExpXorOpAExp(AAExpXorOpAExp node)
    {
        defaultIn(node);
    }

    public void outAAExpXorOpAExp(AAExpXorOpAExp node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAAExpXorOpAExp(AAExpXorOpAExp node)
    {
        inAAExpXorOpAExp(node);
        if(node.getDir() != null)
        {
            node.getDir().apply(this);
        }
        if(node.getEsq() != null)
        {
            node.getEsq().apply(this);
        }
        outAAExpXorOpAExp(node);
    }

    public void inAAExpIgualAExp(AAExpIgualAExp node)
    {
        defaultIn(node);
    }

    public void outAAExpIgualAExp(AAExpIgualAExp node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAAExpIgualAExp(AAExpIgualAExp node)
    {
        inAAExpIgualAExp(node);
        if(node.getDir() != null)
        {
            node.getDir().apply(this);
        }
        if(node.getEsq() != null)
        {
            node.getEsq().apply(this);
        }
        outAAExpIgualAExp(node);
    }

    public void inAAExpDifAExp(AAExpDifAExp node)
    {
        defaultIn(node);
    }

    public void outAAExpDifAExp(AAExpDifAExp node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAAExpDifAExp(AAExpDifAExp node)
    {
        inAAExpDifAExp(node);
        if(node.getDir() != null)
        {
            node.getDir().apply(this);
        }
        if(node.getEsq() != null)
        {
            node.getEsq().apply(this);
        }
        outAAExpDifAExp(node);
    }

    public void inAAExpMaiorAExp(AAExpMaiorAExp node)
    {
        defaultIn(node);
    }

    public void outAAExpMaiorAExp(AAExpMaiorAExp node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAAExpMaiorAExp(AAExpMaiorAExp node)
    {
        inAAExpMaiorAExp(node);
        if(node.getDir() != null)
        {
            node.getDir().apply(this);
        }
        if(node.getEsq() != null)
        {
            node.getEsq().apply(this);
        }
        outAAExpMaiorAExp(node);
    }

    public void inAAExpMenorAExp(AAExpMenorAExp node)
    {
        defaultIn(node);
    }

    public void outAAExpMenorAExp(AAExpMenorAExp node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAAExpMenorAExp(AAExpMenorAExp node)
    {
        inAAExpMenorAExp(node);
        if(node.getDir() != null)
        {
            node.getDir().apply(this);
        }
        if(node.getEsq() != null)
        {
            node.getEsq().apply(this);
        }
        outAAExpMenorAExp(node);
    }

    public void inAAExpMenIgualAExp(AAExpMenIgualAExp node)
    {
        defaultIn(node);
    }

    public void outAAExpMenIgualAExp(AAExpMenIgualAExp node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAAExpMenIgualAExp(AAExpMenIgualAExp node)
    {
        inAAExpMenIgualAExp(node);
        if(node.getDir() != null)
        {
            node.getDir().apply(this);
        }
        if(node.getEsq() != null)
        {
            node.getEsq().apply(this);
        }
        outAAExpMenIgualAExp(node);
    }

    public void inAAExpMaiIgualAExp(AAExpMaiIgualAExp node)
    {
        defaultIn(node);
    }

    public void outAAExpMaiIgualAExp(AAExpMaiIgualAExp node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAAExpMaiIgualAExp(AAExpMaiIgualAExp node)
    {
        inAAExpMaiIgualAExp(node);
        if(node.getDir() != null)
        {
            node.getDir().apply(this);
        }
        if(node.getEsq() != null)
        {
            node.getEsq().apply(this);
        }
        outAAExpMaiIgualAExp(node);
    }

    public void inAAExpSomaAExp(AAExpSomaAExp node)
    {
        defaultIn(node);
    }

    public void outAAExpSomaAExp(AAExpSomaAExp node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAAExpSomaAExp(AAExpSomaAExp node)
    {
        inAAExpSomaAExp(node);
        if(node.getDir() != null)
        {
            node.getDir().apply(this);
        }
        if(node.getEsq() != null)
        {
            node.getEsq().apply(this);
        }
        outAAExpSomaAExp(node);
    }

    public void inAAExpMenosAExp(AAExpMenosAExp node)
    {
        defaultIn(node);
    }

    public void outAAExpMenosAExp(AAExpMenosAExp node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAAExpMenosAExp(AAExpMenosAExp node)
    {
        inAAExpMenosAExp(node);
        if(node.getDir() != null)
        {
            node.getDir().apply(this);
        }
        if(node.getEsq() != null)
        {
            node.getEsq().apply(this);
        }
        outAAExpMenosAExp(node);
    }

    public void inAAExpMultAExp(AAExpMultAExp node)
    {
        defaultIn(node);
    }

    public void outAAExpMultAExp(AAExpMultAExp node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAAExpMultAExp(AAExpMultAExp node)
    {
        inAAExpMultAExp(node);
        if(node.getDir() != null)
        {
            node.getDir().apply(this);
        }
        if(node.getEsq() != null)
        {
            node.getEsq().apply(this);
        }
        outAAExpMultAExp(node);
    }

    public void inAAExpDivAExp(AAExpDivAExp node)
    {
        defaultIn(node);
    }

    public void outAAExpDivAExp(AAExpDivAExp node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAAExpDivAExp(AAExpDivAExp node)
    {
        inAAExpDivAExp(node);
        if(node.getDir() != null)
        {
            node.getDir().apply(this);
        }
        if(node.getEsq() != null)
        {
            node.getEsq().apply(this);
        }
        outAAExpDivAExp(node);
    }

    public void inAAExpDivIntAExp(AAExpDivIntAExp node)
    {
        defaultIn(node);
    }

    public void outAAExpDivIntAExp(AAExpDivIntAExp node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAAExpDivIntAExp(AAExpDivIntAExp node)
    {
        inAAExpDivIntAExp(node);
        if(node.getDir() != null)
        {
            node.getDir().apply(this);
        }
        if(node.getEsq() != null)
        {
            node.getEsq().apply(this);
        }
        outAAExpDivIntAExp(node);
    }

    public void inAAExpNegativoAExp(AAExpNegativoAExp node)
    {
        defaultIn(node);
    }

    public void outAAExpNegativoAExp(AAExpNegativoAExp node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAAExpNegativoAExp(AAExpNegativoAExp node)
    {
        inAAExpNegativoAExp(node);
        if(node.getAExp() != null)
        {
            node.getAExp().apply(this);
        }
        outAAExpNegativoAExp(node);
    }

    public void inAAExpNotAExp(AAExpNotAExp node)
    {
        defaultIn(node);
    }

    public void outAAExpNotAExp(AAExpNotAExp node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAAExpNotAExp(AAExpNotAExp node)
    {
        inAAExpNotAExp(node);
        if(node.getAExp() != null)
        {
            node.getAExp().apply(this);
        }
        outAAExpNotAExp(node);
    }

    public void inAANumberValAExp(AANumberValAExp node)
    {
        defaultIn(node);
    }

    public void outAANumberValAExp(AANumberValAExp node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAANumberValAExp(AANumberValAExp node)
    {
        inAANumberValAExp(node);
        if(node.getNumberVal() != null)
        {
            node.getNumberVal().apply(this);
        }
        outAANumberValAExp(node);
    }

    public void inAASymbolValAExp(AASymbolValAExp node)
    {
        defaultIn(node);
    }

    public void outAASymbolValAExp(AASymbolValAExp node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAASymbolValAExp(AASymbolValAExp node)
    {
        inAASymbolValAExp(node);
        if(node.getSymbolVal() != null)
        {
            node.getSymbolVal().apply(this);
        }
        outAASymbolValAExp(node);
    }

    public void inAAStringAExp(AAStringAExp node)
    {
        defaultIn(node);
    }

    public void outAAStringAExp(AAStringAExp node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAAStringAExp(AAStringAExp node)
    {
        inAAStringAExp(node);
        if(node.getString() != null)
        {
            node.getString().apply(this);
        }
        outAAStringAExp(node);
    }

    public void inAAAnswerValAExp(AAAnswerValAExp node)
    {
        defaultIn(node);
    }

    public void outAAAnswerValAExp(AAAnswerValAExp node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAAAnswerValAExp(AAAnswerValAExp node)
    {
        inAAAnswerValAExp(node);
        if(node.getAnswerVal() != null)
        {
            node.getAnswerVal().apply(this);
        }
        outAAAnswerValAExp(node);
    }

    public void inAAExpVarAExp(AAExpVarAExp node)
    {
        defaultIn(node);
    }

    public void outAAExpVarAExp(AAExpVarAExp node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAAExpVarAExp(AAExpVarAExp node)
    {
        inAAExpVarAExp(node);
        if(node.getAVar() != null)
        {
            node.getAVar().apply(this);
        }
        outAAExpVarAExp(node);
    }

    public void inAAIdentificadorAVar(AAIdentificadorAVar node)
    {
        defaultIn(node);
    }

    public void outAAIdentificadorAVar(AAIdentificadorAVar node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAAIdentificadorAVar(AAIdentificadorAVar node)
    {
        inAAIdentificadorAVar(node);
        if(node.getId() != null)
        {
            node.getId().apply(this);
        }
        outAAIdentificadorAVar(node);
    }

    public void inAAAcessoVectorAVar(AAAcessoVectorAVar node)
    {
        defaultIn(node);
    }

    public void outAAAcessoVectorAVar(AAAcessoVectorAVar node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAAAcessoVectorAVar(AAAcessoVectorAVar node)
    {
        inAAAcessoVectorAVar(node);
        if(node.getId() != null)
        {
            node.getId().apply(this);
        }
        if(node.getAExp() != null)
        {
            node.getAExp().apply(this);
        }
        {
            List<PAVar> copy = new ArrayList<PAVar>(node.getAVar());
            for(PAVar e : copy)
            {
                e.apply(this);
            }
        }
        outAAAcessoVectorAVar(node);
    }

    public void inAAVirgulaExpAVar(AAVirgulaExpAVar node)
    {
        defaultIn(node);
    }

    public void outAAVirgulaExpAVar(AAVirgulaExpAVar node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAAVirgulaExpAVar(AAVirgulaExpAVar node)
    {
        inAAVirgulaExpAVar(node);
        if(node.getAExp() != null)
        {
            node.getAExp().apply(this);
        }
        outAAVirgulaExpAVar(node);
    }

    public void inAArUnaltAUnalt(AArUnaltAUnalt node)
    {
        defaultIn(node);
    }

    public void outAArUnaltAUnalt(AArUnaltAUnalt node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAArUnaltAUnalt(AArUnaltAUnalt node)
    {
        inAArUnaltAUnalt(node);
        if(node.getId() != null)
        {
            node.getId().apply(this);
        }
        outAArUnaltAUnalt(node);
    }

    public void inAAJustInCaseThatAComando(AAJustInCaseThatAComando node)
    {
        defaultIn(node);
    }

    public void outAAJustInCaseThatAComando(AAJustInCaseThatAComando node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAAJustInCaseThatAComando(AAJustInCaseThatAComando node)
    {
        inAAJustInCaseThatAComando(node);
        if(node.getAExp() != null)
        {
            node.getAExp().apply(this);
        }
        if(node.getCorpo() != null)
        {
            node.getCorpo().apply(this);
        }
        if(node.getCond() != null)
        {
            node.getCond().apply(this);
        }
        outAAJustInCaseThatAComando(node);
    }

    public void inAAAsLongAComando(AAAsLongAComando node)
    {
        defaultIn(node);
    }

    public void outAAAsLongAComando(AAAsLongAComando node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAAAsLongAComando(AAAsLongAComando node)
    {
        inAAAsLongAComando(node);
        if(node.getAExp() != null)
        {
            node.getAExp().apply(this);
        }
        if(node.getAComando() != null)
        {
            node.getAComando().apply(this);
        }
        outAAAsLongAComando(node);
    }

    public void inAAConsideringAComando(AAConsideringAComando node)
    {
        defaultIn(node);
    }

    public void outAAConsideringAComando(AAConsideringAComando node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAAConsideringAComando(AAConsideringAComando node)
    {
        inAAConsideringAComando(node);
        if(node.getAVar() != null)
        {
            node.getAVar().apply(this);
        }
        if(node.getExp1() != null)
        {
            node.getExp1().apply(this);
        }
        if(node.getExp2() != null)
        {
            node.getExp2().apply(this);
        }
        if(node.getExp3() != null)
        {
            node.getExp3().apply(this);
        }
        if(node.getAComando() != null)
        {
            node.getAComando().apply(this);
        }
        outAAConsideringAComando(node);
    }

    public void inAACondicionalAComando(AACondicionalAComando node)
    {
        defaultIn(node);
    }

    public void outAACondicionalAComando(AACondicionalAComando node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAACondicionalAComando(AACondicionalAComando node)
    {
        inAACondicionalAComando(node);
        if(node.getAComando() != null)
        {
            node.getAComando().apply(this);
        }
        outAACondicionalAComando(node);
    }

    public void inAAAtrVarAComando(AAAtrVarAComando node)
    {
        defaultIn(node);
    }

    public void outAAAtrVarAComando(AAAtrVarAComando node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAAAtrVarAComando(AAAtrVarAComando node)
    {
        inAAAtrVarAComando(node);
        if(node.getAVar() != null)
        {
            node.getAVar().apply(this);
        }
        if(node.getAExp() != null)
        {
            node.getAExp().apply(this);
        }
        outAAAtrVarAComando(node);
    }

    public void inAAAtribConstAComando(AAAtribConstAComando node)
    {
        defaultIn(node);
    }

    public void outAAAtribConstAComando(AAAtribConstAComando node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAAAtribConstAComando(AAAtribConstAComando node)
    {
        inAAAtribConstAComando(node);
        if(node.getId() != null)
        {
            node.getId().apply(this);
        }
        if(node.getAExp() != null)
        {
            node.getAExp().apply(this);
        }
        outAAAtribConstAComando(node);
    }

    public void inAACaptureAComando(AACaptureAComando node)
    {
        defaultIn(node);
    }

    public void outAACaptureAComando(AACaptureAComando node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAACaptureAComando(AACaptureAComando node)
    {
        inAACaptureAComando(node);
        {
            List<PAComando> copy = new ArrayList<PAComando>(node.getAComando());
            for(PAComando e : copy)
            {
                e.apply(this);
            }
        }
        if(node.getAVar() != null)
        {
            node.getAVar().apply(this);
        }
        outAACaptureAComando(node);
    }

    public void inAAShowAComando(AAShowAComando node)
    {
        defaultIn(node);
    }

    public void outAAShowAComando(AAShowAComando node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAAShowAComando(AAShowAComando node)
    {
        inAAShowAComando(node);
        {
            List<PAComando> copy = new ArrayList<PAComando>(node.getAComando());
            for(PAComando e : copy)
            {
                e.apply(this);
            }
        }
        if(node.getAExp() != null)
        {
            node.getAExp().apply(this);
        }
        outAAShowAComando(node);
    }

    public void inAAAbandonAComando(AAAbandonAComando node)
    {
        defaultIn(node);
    }

    public void outAAAbandonAComando(AAAbandonAComando node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAAAbandonAComando(AAAbandonAComando node)
    {
        inAAAbandonAComando(node);
        if(node.getAbandon() != null)
        {
            node.getAbandon().apply(this);
        }
        if(node.getPntVirg() != null)
        {
            node.getPntVirg().apply(this);
        }
        outAAAbandonAComando(node);
    }

    public void inAAGoToNextIAComando(AAGoToNextIAComando node)
    {
        defaultIn(node);
    }

    public void outAAGoToNextIAComando(AAGoToNextIAComando node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAAGoToNextIAComando(AAGoToNextIAComando node)
    {
        inAAGoToNextIAComando(node);
        if(node.getGo() != null)
        {
            node.getGo().apply(this);
        }
        if(node.getTo() != null)
        {
            node.getTo().apply(this);
        }
        if(node.getNext() != null)
        {
            node.getNext().apply(this);
        }
        if(node.getIteration() != null)
        {
            node.getIteration().apply(this);
        }
        if(node.getPntVirg() != null)
        {
            node.getPntVirg().apply(this);
        }
        outAAGoToNextIAComando(node);
    }

    public void inAABlocoAComando(AABlocoAComando node)
    {
        defaultIn(node);
    }

    public void outAABlocoAComando(AABlocoAComando node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAABlocoAComando(AABlocoAComando node)
    {
        inAABlocoAComando(node);
        {
            List<PADeclaracao> copy = new ArrayList<PADeclaracao>(node.getADeclaracao());
            for(PADeclaracao e : copy)
            {
                e.apply(this);
            }
        }
        {
            List<PAComando> copy = new ArrayList<PAComando>(node.getAComando());
            for(PAComando e : copy)
            {
                e.apply(this);
            }
        }
        outAABlocoAComando(node);
    }

    public void inAAVarVirgulaAComando(AAVarVirgulaAComando node)
    {
        defaultIn(node);
    }

    public void outAAVarVirgulaAComando(AAVarVirgulaAComando node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAAVarVirgulaAComando(AAVarVirgulaAComando node)
    {
        inAAVarVirgulaAComando(node);
        if(node.getAVar() != null)
        {
            node.getAVar().apply(this);
        }
        outAAVarVirgulaAComando(node);
    }

    public void inAAExpVirgulaAComando(AAExpVirgulaAComando node)
    {
        defaultIn(node);
    }

    public void outAAExpVirgulaAComando(AAExpVirgulaAComando node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAAExpVirgulaAComando(AAExpVirgulaAComando node)
    {
        inAAExpVirgulaAComando(node);
        if(node.getAExp() != null)
        {
            node.getAExp().apply(this);
        }
        outAAExpVirgulaAComando(node);
    }
}

/* This file was generated by SableCC (http://www.sablecc.org/). */

package prolixa.analysis;

import java.util.*;
import prolixa.node.*;

public class AnalysisAdapter implements Analysis
{
    private Hashtable<Node,Object> in;
    private Hashtable<Node,Object> out;

    @Override
    public Object getIn(Node node)
    {
        if(this.in == null)
        {
            return null;
        }

        return this.in.get(node);
    }

    @Override
    public void setIn(Node node, Object o)
    {
        if(this.in == null)
        {
            this.in = new Hashtable<Node,Object>(1);
        }

        if(o != null)
        {
            this.in.put(node, o);
        }
        else
        {
            this.in.remove(node);
        }
    }

    @Override
    public Object getOut(Node node)
    {
        if(this.out == null)
        {
            return null;
        }

        return this.out.get(node);
    }

    @Override
    public void setOut(Node node, Object o)
    {
        if(this.out == null)
        {
            this.out = new Hashtable<Node,Object>(1);
        }

        if(o != null)
        {
            this.out.put(node, o);
        }
        else
        {
            this.out.remove(node);
        }
    }

    @Override
    public void caseStart(Start node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAArProgramaAPrograma(AArProgramaAPrograma node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAArDeclaracoesADeclaracoes(AArDeclaracoesADeclaracoes node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAArComandosAComandos(AArComandosAComandos node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAAVariavelADeclaracao(AAVariavelADeclaracao node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAAConstanteADeclaracao(AAConstanteADeclaracao node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAAVetorADeclaracao(AAVetorADeclaracao node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAAMatrizADeclaracao(AAMatrizADeclaracao node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAANumberADeclaracao(AANumberADeclaracao node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAASymbolADeclaracao(AASymbolADeclaracao node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAAAnswerADeclaracao(AAAnswerADeclaracao node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAAAtrConstADeclaracao(AAAtrConstADeclaracao node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAAAtribuicaoConstADeclaracao(AAAtribuicaoConstADeclaracao node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAAExpOrAExp(AAExpOrAExp node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAAExpAndOrAExp(AAExpAndOrAExp node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAAExpXorOpAExp(AAExpXorOpAExp node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAAExpIgualAExp(AAExpIgualAExp node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAAExpDifAExp(AAExpDifAExp node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAAExpMaiorAExp(AAExpMaiorAExp node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAAExpMenorAExp(AAExpMenorAExp node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAAExpMenIgualAExp(AAExpMenIgualAExp node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAAExpMaiIgualAExp(AAExpMaiIgualAExp node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAAExpSomaAExp(AAExpSomaAExp node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAAExpMenosAExp(AAExpMenosAExp node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAAExpMultAExp(AAExpMultAExp node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAAExpDivAExp(AAExpDivAExp node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAAExpDivIntAExp(AAExpDivIntAExp node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAAExpNegativoAExp(AAExpNegativoAExp node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAAExpNotAExp(AAExpNotAExp node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAAExpParentesesAExp(AAExpParentesesAExp node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAANumberValAExp(AANumberValAExp node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAASymbolValAExp(AASymbolValAExp node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAAStringAExp(AAStringAExp node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAAAnswerValAExp(AAAnswerValAExp node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAAExpVarAExp(AAExpVarAExp node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAAIdentificadorAVar(AAIdentificadorAVar node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAAAcessoVectorAVar(AAAcessoVectorAVar node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAAVirgulaExpAVar(AAVirgulaExpAVar node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAArUnaltAUnalt(AArUnaltAUnalt node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAAJustInCaseThatAComando(AAJustInCaseThatAComando node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAAAsLongAComando(AAAsLongAComando node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAAConsideringAComando(AAConsideringAComando node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAACondicionalAComando(AACondicionalAComando node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAAAtrVarAComando(AAAtrVarAComando node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAAAtribConstAComando(AAAtribConstAComando node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAACaptureAComando(AACaptureAComando node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAAShowAComando(AAShowAComando node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAAAbandonAComando(AAAbandonAComando node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAAGoToNextIAComando(AAGoToNextIAComando node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAABlocoAComando(AABlocoAComando node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAAVarVirgulaAComando(AAVarVirgulaAComando node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAAExpVirgulaAComando(AAExpVirgulaAComando node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTThis(TThis node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTIs(TIs node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTProgram(TProgram node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTIt(TIt node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTPresents(TPresents node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTLet(TLet node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTUs(TUs node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTBegin(TBegin node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTThat(TThat node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTWould(TWould node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTBe(TBe node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTAll(TAll node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTAlterable(TAlterable node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTUnalterable(TUnalterable node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTVector(TVector node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTOf(TOf node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTMatriz(TMatriz node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTCapture(TCapture node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTShow(TShow node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTJust(TJust node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTIn(TIn node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTCase(TCase node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTThatMin(TThatMin node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTDo(TDo node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTOtherwise(TOtherwise node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTAs(TAs node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTLong(TLong node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTConsidering(TConsidering node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTFrom(TFrom node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTTo(TTo node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTBy(TBy node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTNext(TNext node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTAbandon(TAbandon node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTGo(TGo node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTIteration(TIteration node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTNumber(TNumber node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTAnswer(TAnswer node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTSymbol(TSymbol node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTSoma(TSoma node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTMenos(TMenos node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTMult(TMult node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTDiv(TDiv node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTDivInt(TDivInt node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTIgual(TIgual node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTDif(TDif node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTMenIgual(TMenIgual node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTMaiIgual(TMaiIgual node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTMenor(TMenor node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTMaior(TMaior node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTNot(TNot node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTAnd(TAnd node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTOr(TOr node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTXor(TXor node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTAtrConst(TAtrConst node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTAtrVar(TAtrVar node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTParEsq(TParEsq node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTParDir(TParDir node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTColEsq(TColEsq node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTColDir(TColDir node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTPonto(TPonto node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTVirgula(TVirgula node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTDoisPnts(TDoisPnts node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTPntVirg(TPntVirg node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTSymbolVal(TSymbolVal node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTAnswerVal(TAnswerVal node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTNumberVal(TNumberVal node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTString(TString node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTComentario(TComentario node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTId(TId node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTVazio(TVazio node)
    {
        defaultCase(node);
    }

    @Override
    public void caseEOF(EOF node)
    {
        defaultCase(node);
    }

    @Override
    public void caseInvalidToken(InvalidToken node)
    {
        defaultCase(node);
    }

    public void defaultCase(@SuppressWarnings("unused") Node node)
    {
        // do nothing
    }
}

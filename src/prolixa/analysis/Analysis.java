/* This file was generated by SableCC (http://www.sablecc.org/). */

package prolixa.analysis;

import prolixa.node.*;

public interface Analysis extends Switch
{
    Object getIn(Node node);
    void setIn(Node node, Object o);
    Object getOut(Node node);
    void setOut(Node node, Object o);

    void caseStart(Start node);
    void caseAArProgramaAPrograma(AArProgramaAPrograma node);
    void caseAArDeclaracoesADeclaracoes(AArDeclaracoesADeclaracoes node);
    void caseAArComandosAComandos(AArComandosAComandos node);
    void caseAAVariavelADeclaracao(AAVariavelADeclaracao node);
    void caseAAConstanteADeclaracao(AAConstanteADeclaracao node);
    void caseAAVetorADeclaracao(AAVetorADeclaracao node);
    void caseAAMatrizADeclaracao(AAMatrizADeclaracao node);
    void caseAANumberADeclaracao(AANumberADeclaracao node);
    void caseAASymbolADeclaracao(AASymbolADeclaracao node);
    void caseAAAnswerADeclaracao(AAAnswerADeclaracao node);
    void caseAAAtrConstADeclaracao(AAAtrConstADeclaracao node);
    void caseAAAtribuicaoConstADeclaracao(AAAtribuicaoConstADeclaracao node);
    void caseAAExpOrAExp(AAExpOrAExp node);
    void caseAAExpAndOrAExp(AAExpAndOrAExp node);
    void caseAAExpXorOpAExp(AAExpXorOpAExp node);
    void caseAAExpIgualAExp(AAExpIgualAExp node);
    void caseAAExpDifAExp(AAExpDifAExp node);
    void caseAAExpMaiorAExp(AAExpMaiorAExp node);
    void caseAAExpMenorAExp(AAExpMenorAExp node);
    void caseAAExpMenIgualAExp(AAExpMenIgualAExp node);
    void caseAAExpMaiIgualAExp(AAExpMaiIgualAExp node);
    void caseAAExpSomaAExp(AAExpSomaAExp node);
    void caseAAExpMenosAExp(AAExpMenosAExp node);
    void caseAAExpMultAExp(AAExpMultAExp node);
    void caseAAExpDivAExp(AAExpDivAExp node);
    void caseAAExpDivIntAExp(AAExpDivIntAExp node);
    void caseAAExpNegativoAExp(AAExpNegativoAExp node);
    void caseAAExpNotAExp(AAExpNotAExp node);
    void caseAANumberValAExp(AANumberValAExp node);
    void caseAASymbolValAExp(AASymbolValAExp node);
    void caseAAStringAExp(AAStringAExp node);
    void caseAAAnswerValAExp(AAAnswerValAExp node);
    void caseAAExpVarAExp(AAExpVarAExp node);
    void caseAAIdentificadorAVar(AAIdentificadorAVar node);
    void caseAAAcessoVectorAVar(AAAcessoVectorAVar node);
    void caseAAVirgulaExpAVar(AAVirgulaExpAVar node);
    void caseAArUnaltAUnalt(AArUnaltAUnalt node);
    void caseAAJustInCaseThatAComando(AAJustInCaseThatAComando node);
    void caseAAAsLongAComando(AAAsLongAComando node);
    void caseAAConsideringAComando(AAConsideringAComando node);
    void caseAACondicionalAComando(AACondicionalAComando node);
    void caseAAAtrVarAComando(AAAtrVarAComando node);
    void caseAAAtribConstAComando(AAAtribConstAComando node);
    void caseAACaptureAComando(AACaptureAComando node);
    void caseAAShowAComando(AAShowAComando node);
    void caseAAAbandonAComando(AAAbandonAComando node);
    void caseAAGoToNextIAComando(AAGoToNextIAComando node);
    void caseAABlocoAComando(AABlocoAComando node);
    void caseAAVarVirgulaAComando(AAVarVirgulaAComando node);
    void caseAAExpVirgulaAComando(AAExpVirgulaAComando node);

    void caseTThis(TThis node);
    void caseTIs(TIs node);
    void caseTProgram(TProgram node);
    void caseTIt(TIt node);
    void caseTPresents(TPresents node);
    void caseTLet(TLet node);
    void caseTUs(TUs node);
    void caseTBegin(TBegin node);
    void caseTThat(TThat node);
    void caseTWould(TWould node);
    void caseTBe(TBe node);
    void caseTAll(TAll node);
    void caseTAlterable(TAlterable node);
    void caseTUnalterable(TUnalterable node);
    void caseTVector(TVector node);
    void caseTOf(TOf node);
    void caseTMatriz(TMatriz node);
    void caseTCapture(TCapture node);
    void caseTShow(TShow node);
    void caseTJust(TJust node);
    void caseTIn(TIn node);
    void caseTCase(TCase node);
    void caseTThatMin(TThatMin node);
    void caseTDo(TDo node);
    void caseTOtherwise(TOtherwise node);
    void caseTAs(TAs node);
    void caseTLong(TLong node);
    void caseTConsidering(TConsidering node);
    void caseTFrom(TFrom node);
    void caseTTo(TTo node);
    void caseTBy(TBy node);
    void caseTNext(TNext node);
    void caseTAbandon(TAbandon node);
    void caseTGo(TGo node);
    void caseTIteration(TIteration node);
    void caseTNumber(TNumber node);
    void caseTAnswer(TAnswer node);
    void caseTSymbol(TSymbol node);
    void caseTSoma(TSoma node);
    void caseTMenos(TMenos node);
    void caseTMult(TMult node);
    void caseTDiv(TDiv node);
    void caseTDivInt(TDivInt node);
    void caseTIgual(TIgual node);
    void caseTDif(TDif node);
    void caseTMenIgual(TMenIgual node);
    void caseTMaiIgual(TMaiIgual node);
    void caseTMenor(TMenor node);
    void caseTMaior(TMaior node);
    void caseTNot(TNot node);
    void caseTAnd(TAnd node);
    void caseTOr(TOr node);
    void caseTXor(TXor node);
    void caseTAtrConst(TAtrConst node);
    void caseTAtrVar(TAtrVar node);
    void caseTParEsq(TParEsq node);
    void caseTParDir(TParDir node);
    void caseTColEsq(TColEsq node);
    void caseTColDir(TColDir node);
    void caseTPonto(TPonto node);
    void caseTVirgula(TVirgula node);
    void caseTDoisPnts(TDoisPnts node);
    void caseTPntVirg(TPntVirg node);
    void caseTSymbolVal(TSymbolVal node);
    void caseTAnswerVal(TAnswerVal node);
    void caseTNumberVal(TNumberVal node);
    void caseTString(TString node);
    void caseTComentario(TComentario node);
    void caseTId(TId node);
    void caseTVazio(TVazio node);
    void caseEOF(EOF node);
    void caseInvalidToken(InvalidToken node);
}

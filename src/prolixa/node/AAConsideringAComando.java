/* This file was generated by SableCC (http://www.sablecc.org/). */

package prolixa.node;

import prolixa.analysis.*;

@SuppressWarnings("nls")
public final class AAConsideringAComando extends PAComando
{
    private PAVar _aVar_;
    private PAExp _exp1_;
    private PAExp _exp2_;
    private PAExp _exp3_;
    private PAComando _aComando_;

    public AAConsideringAComando()
    {
        // Constructor
    }

    public AAConsideringAComando(
        @SuppressWarnings("hiding") PAVar _aVar_,
        @SuppressWarnings("hiding") PAExp _exp1_,
        @SuppressWarnings("hiding") PAExp _exp2_,
        @SuppressWarnings("hiding") PAExp _exp3_,
        @SuppressWarnings("hiding") PAComando _aComando_)
    {
        // Constructor
        setAVar(_aVar_);

        setExp1(_exp1_);

        setExp2(_exp2_);

        setExp3(_exp3_);

        setAComando(_aComando_);

    }

    @Override
    public Object clone()
    {
        return new AAConsideringAComando(
            cloneNode(this._aVar_),
            cloneNode(this._exp1_),
            cloneNode(this._exp2_),
            cloneNode(this._exp3_),
            cloneNode(this._aComando_));
    }

    @Override
    public void apply(Switch sw)
    {
        ((Analysis) sw).caseAAConsideringAComando(this);
    }

    public PAVar getAVar()
    {
        return this._aVar_;
    }

    public void setAVar(PAVar node)
    {
        if(this._aVar_ != null)
        {
            this._aVar_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._aVar_ = node;
    }

    public PAExp getExp1()
    {
        return this._exp1_;
    }

    public void setExp1(PAExp node)
    {
        if(this._exp1_ != null)
        {
            this._exp1_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._exp1_ = node;
    }

    public PAExp getExp2()
    {
        return this._exp2_;
    }

    public void setExp2(PAExp node)
    {
        if(this._exp2_ != null)
        {
            this._exp2_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._exp2_ = node;
    }

    public PAExp getExp3()
    {
        return this._exp3_;
    }

    public void setExp3(PAExp node)
    {
        if(this._exp3_ != null)
        {
            this._exp3_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._exp3_ = node;
    }

    public PAComando getAComando()
    {
        return this._aComando_;
    }

    public void setAComando(PAComando node)
    {
        if(this._aComando_ != null)
        {
            this._aComando_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._aComando_ = node;
    }

    @Override
    public String toString()
    {
        return ""
            + toString(this._aVar_)
            + toString(this._exp1_)
            + toString(this._exp2_)
            + toString(this._exp3_)
            + toString(this._aComando_);
    }

    @Override
    void removeChild(@SuppressWarnings("unused") Node child)
    {
        // Remove child
        if(this._aVar_ == child)
        {
            this._aVar_ = null;
            return;
        }

        if(this._exp1_ == child)
        {
            this._exp1_ = null;
            return;
        }

        if(this._exp2_ == child)
        {
            this._exp2_ = null;
            return;
        }

        if(this._exp3_ == child)
        {
            this._exp3_ = null;
            return;
        }

        if(this._aComando_ == child)
        {
            this._aComando_ = null;
            return;
        }

        throw new RuntimeException("Not a child.");
    }

    @Override
    void replaceChild(@SuppressWarnings("unused") Node oldChild, @SuppressWarnings("unused") Node newChild)
    {
        // Replace child
        if(this._aVar_ == oldChild)
        {
            setAVar((PAVar) newChild);
            return;
        }

        if(this._exp1_ == oldChild)
        {
            setExp1((PAExp) newChild);
            return;
        }

        if(this._exp2_ == oldChild)
        {
            setExp2((PAExp) newChild);
            return;
        }

        if(this._exp3_ == oldChild)
        {
            setExp3((PAExp) newChild);
            return;
        }

        if(this._aComando_ == oldChild)
        {
            setAComando((PAComando) newChild);
            return;
        }

        throw new RuntimeException("Not a child.");
    }
}

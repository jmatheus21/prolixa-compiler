/* This file was generated by SableCC (http://www.sablecc.org/). */

package prolixa.node;

import prolixa.analysis.*;

@SuppressWarnings("nls")
public final class AAExpIgualAExp extends PAExp
{
    private PAExp _dir_;
    private PAExp _esq_;

    public AAExpIgualAExp()
    {
        // Constructor
    }

    public AAExpIgualAExp(
        @SuppressWarnings("hiding") PAExp _dir_,
        @SuppressWarnings("hiding") PAExp _esq_)
    {
        // Constructor
        setDir(_dir_);

        setEsq(_esq_);

    }

    @Override
    public Object clone()
    {
        return new AAExpIgualAExp(
            cloneNode(this._dir_),
            cloneNode(this._esq_));
    }

    @Override
    public void apply(Switch sw)
    {
        ((Analysis) sw).caseAAExpIgualAExp(this);
    }

    public PAExp getDir()
    {
        return this._dir_;
    }

    public void setDir(PAExp node)
    {
        if(this._dir_ != null)
        {
            this._dir_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._dir_ = node;
    }

    public PAExp getEsq()
    {
        return this._esq_;
    }

    public void setEsq(PAExp node)
    {
        if(this._esq_ != null)
        {
            this._esq_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._esq_ = node;
    }

    @Override
    public String toString()
    {
        return ""
            + toString(this._dir_)
            + toString(this._esq_);
    }

    @Override
    void removeChild(@SuppressWarnings("unused") Node child)
    {
        // Remove child
        if(this._dir_ == child)
        {
            this._dir_ = null;
            return;
        }

        if(this._esq_ == child)
        {
            this._esq_ = null;
            return;
        }

        throw new RuntimeException("Not a child.");
    }

    @Override
    void replaceChild(@SuppressWarnings("unused") Node oldChild, @SuppressWarnings("unused") Node newChild)
    {
        // Replace child
        if(this._dir_ == oldChild)
        {
            setDir((PAExp) newChild);
            return;
        }

        if(this._esq_ == oldChild)
        {
            setEsq((PAExp) newChild);
            return;
        }

        throw new RuntimeException("Not a child.");
    }
}

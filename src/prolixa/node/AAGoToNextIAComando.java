/* This file was generated by SableCC (http://www.sablecc.org/). */

package prolixa.node;

import prolixa.analysis.*;

@SuppressWarnings("nls")
public final class AAGoToNextIAComando extends PAComando
{
    private TGo _go_;
    private TTo _to_;
    private TNext _next_;
    private TIteration _iteration_;
    private TPntVirg _pntVirg_;

    public AAGoToNextIAComando()
    {
        // Constructor
    }

    public AAGoToNextIAComando(
        @SuppressWarnings("hiding") TGo _go_,
        @SuppressWarnings("hiding") TTo _to_,
        @SuppressWarnings("hiding") TNext _next_,
        @SuppressWarnings("hiding") TIteration _iteration_,
        @SuppressWarnings("hiding") TPntVirg _pntVirg_)
    {
        // Constructor
        setGo(_go_);

        setTo(_to_);

        setNext(_next_);

        setIteration(_iteration_);

        setPntVirg(_pntVirg_);

    }

    @Override
    public Object clone()
    {
        return new AAGoToNextIAComando(
            cloneNode(this._go_),
            cloneNode(this._to_),
            cloneNode(this._next_),
            cloneNode(this._iteration_),
            cloneNode(this._pntVirg_));
    }

    @Override
    public void apply(Switch sw)
    {
        ((Analysis) sw).caseAAGoToNextIAComando(this);
    }

    public TGo getGo()
    {
        return this._go_;
    }

    public void setGo(TGo node)
    {
        if(this._go_ != null)
        {
            this._go_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._go_ = node;
    }

    public TTo getTo()
    {
        return this._to_;
    }

    public void setTo(TTo node)
    {
        if(this._to_ != null)
        {
            this._to_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._to_ = node;
    }

    public TNext getNext()
    {
        return this._next_;
    }

    public void setNext(TNext node)
    {
        if(this._next_ != null)
        {
            this._next_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._next_ = node;
    }

    public TIteration getIteration()
    {
        return this._iteration_;
    }

    public void setIteration(TIteration node)
    {
        if(this._iteration_ != null)
        {
            this._iteration_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._iteration_ = node;
    }

    public TPntVirg getPntVirg()
    {
        return this._pntVirg_;
    }

    public void setPntVirg(TPntVirg node)
    {
        if(this._pntVirg_ != null)
        {
            this._pntVirg_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._pntVirg_ = node;
    }

    @Override
    public String toString()
    {
        return ""
            + toString(this._go_)
            + toString(this._to_)
            + toString(this._next_)
            + toString(this._iteration_)
            + toString(this._pntVirg_);
    }

    @Override
    void removeChild(@SuppressWarnings("unused") Node child)
    {
        // Remove child
        if(this._go_ == child)
        {
            this._go_ = null;
            return;
        }

        if(this._to_ == child)
        {
            this._to_ = null;
            return;
        }

        if(this._next_ == child)
        {
            this._next_ = null;
            return;
        }

        if(this._iteration_ == child)
        {
            this._iteration_ = null;
            return;
        }

        if(this._pntVirg_ == child)
        {
            this._pntVirg_ = null;
            return;
        }

        throw new RuntimeException("Not a child.");
    }

    @Override
    void replaceChild(@SuppressWarnings("unused") Node oldChild, @SuppressWarnings("unused") Node newChild)
    {
        // Replace child
        if(this._go_ == oldChild)
        {
            setGo((TGo) newChild);
            return;
        }

        if(this._to_ == oldChild)
        {
            setTo((TTo) newChild);
            return;
        }

        if(this._next_ == oldChild)
        {
            setNext((TNext) newChild);
            return;
        }

        if(this._iteration_ == oldChild)
        {
            setIteration((TIteration) newChild);
            return;
        }

        if(this._pntVirg_ == oldChild)
        {
            setPntVirg((TPntVirg) newChild);
            return;
        }

        throw new RuntimeException("Not a child.");
    }
}

/* This file was generated by SableCC (http://www.sablecc.org/). */

package prolixa.node;

import java.util.*;
import prolixa.analysis.*;

@SuppressWarnings("nls")
public final class AAVetorADeclaracao extends PADeclaracao
{
    private PADeclaracao _tipo_;
    private PAExp _aExp_;
    private final LinkedList<PADeclaracao> _matriz_ = new LinkedList<PADeclaracao>();
    private TId _id_;

    public AAVetorADeclaracao()
    {
        // Constructor
    }

    public AAVetorADeclaracao(
        @SuppressWarnings("hiding") PADeclaracao _tipo_,
        @SuppressWarnings("hiding") PAExp _aExp_,
        @SuppressWarnings("hiding") List<?> _matriz_,
        @SuppressWarnings("hiding") TId _id_)
    {
        // Constructor
        setTipo(_tipo_);

        setAExp(_aExp_);

        setMatriz(_matriz_);

        setId(_id_);

    }

    @Override
    public Object clone()
    {
        return new AAVetorADeclaracao(
            cloneNode(this._tipo_),
            cloneNode(this._aExp_),
            cloneList(this._matriz_),
            cloneNode(this._id_));
    }

    @Override
    public void apply(Switch sw)
    {
        ((Analysis) sw).caseAAVetorADeclaracao(this);
    }

    public PADeclaracao getTipo()
    {
        return this._tipo_;
    }

    public void setTipo(PADeclaracao node)
    {
        if(this._tipo_ != null)
        {
            this._tipo_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._tipo_ = node;
    }

    public PAExp getAExp()
    {
        return this._aExp_;
    }

    public void setAExp(PAExp node)
    {
        if(this._aExp_ != null)
        {
            this._aExp_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._aExp_ = node;
    }

    public LinkedList<PADeclaracao> getMatriz()
    {
        return this._matriz_;
    }

    public void setMatriz(List<?> list)
    {
        for(PADeclaracao e : this._matriz_)
        {
            e.parent(null);
        }
        this._matriz_.clear();

        for(Object obj_e : list)
        {
            PADeclaracao e = (PADeclaracao) obj_e;
            if(e.parent() != null)
            {
                e.parent().removeChild(e);
            }

            e.parent(this);
            this._matriz_.add(e);
        }
    }

    public TId getId()
    {
        return this._id_;
    }

    public void setId(TId node)
    {
        if(this._id_ != null)
        {
            this._id_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._id_ = node;
    }

    @Override
    public String toString()
    {
        return ""
            + toString(this._tipo_)
            + toString(this._aExp_)
            + toString(this._matriz_)
            + toString(this._id_);
    }

    @Override
    void removeChild(@SuppressWarnings("unused") Node child)
    {
        // Remove child
        if(this._tipo_ == child)
        {
            this._tipo_ = null;
            return;
        }

        if(this._aExp_ == child)
        {
            this._aExp_ = null;
            return;
        }

        if(this._matriz_.remove(child))
        {
            return;
        }

        if(this._id_ == child)
        {
            this._id_ = null;
            return;
        }

        throw new RuntimeException("Not a child.");
    }

    @Override
    void replaceChild(@SuppressWarnings("unused") Node oldChild, @SuppressWarnings("unused") Node newChild)
    {
        // Replace child
        if(this._tipo_ == oldChild)
        {
            setTipo((PADeclaracao) newChild);
            return;
        }

        if(this._aExp_ == oldChild)
        {
            setAExp((PAExp) newChild);
            return;
        }

        for(ListIterator<PADeclaracao> i = this._matriz_.listIterator(); i.hasNext();)
        {
            if(i.next() == oldChild)
            {
                if(newChild != null)
                {
                    i.set((PADeclaracao) newChild);
                    newChild.parent(this);
                    oldChild.parent(null);
                    return;
                }

                i.remove();
                oldChild.parent(null);
                return;
            }
        }

        if(this._id_ == oldChild)
        {
            setId((TId) newChild);
            return;
        }

        throw new RuntimeException("Not a child.");
    }
}

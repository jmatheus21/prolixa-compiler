/* This file was generated by SableCC (http://www.sablecc.org/). */

package prolixa.node;

import prolixa.analysis.*;

@SuppressWarnings("nls")
public final class AAAbandonAComando extends PAComando
{
    private TAbandon _abandon_;
    private TPntVirg _pntVirg_;

    public AAAbandonAComando()
    {
        // Constructor
    }

    public AAAbandonAComando(
        @SuppressWarnings("hiding") TAbandon _abandon_,
        @SuppressWarnings("hiding") TPntVirg _pntVirg_)
    {
        // Constructor
        setAbandon(_abandon_);

        setPntVirg(_pntVirg_);

    }

    @Override
    public Object clone()
    {
        return new AAAbandonAComando(
            cloneNode(this._abandon_),
            cloneNode(this._pntVirg_));
    }

    @Override
    public void apply(Switch sw)
    {
        ((Analysis) sw).caseAAAbandonAComando(this);
    }

    public TAbandon getAbandon()
    {
        return this._abandon_;
    }

    public void setAbandon(TAbandon node)
    {
        if(this._abandon_ != null)
        {
            this._abandon_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._abandon_ = node;
    }

    public TPntVirg getPntVirg()
    {
        return this._pntVirg_;
    }

    public void setPntVirg(TPntVirg node)
    {
        if(this._pntVirg_ != null)
        {
            this._pntVirg_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._pntVirg_ = node;
    }

    @Override
    public String toString()
    {
        return ""
            + toString(this._abandon_)
            + toString(this._pntVirg_);
    }

    @Override
    void removeChild(@SuppressWarnings("unused") Node child)
    {
        // Remove child
        if(this._abandon_ == child)
        {
            this._abandon_ = null;
            return;
        }

        if(this._pntVirg_ == child)
        {
            this._pntVirg_ = null;
            return;
        }

        throw new RuntimeException("Not a child.");
    }

    @Override
    void replaceChild(@SuppressWarnings("unused") Node oldChild, @SuppressWarnings("unused") Node newChild)
    {
        // Replace child
        if(this._abandon_ == oldChild)
        {
            setAbandon((TAbandon) newChild);
            return;
        }

        if(this._pntVirg_ == oldChild)
        {
            setPntVirg((TPntVirg) newChild);
            return;
        }

        throw new RuntimeException("Not a child.");
    }
}
